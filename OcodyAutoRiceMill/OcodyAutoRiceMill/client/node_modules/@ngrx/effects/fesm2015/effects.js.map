{"version":3,"file":"effects.js","sources":["../../../../../../../../../../../execroot/ngrx/bazel-out/darwin-fastbuild/bin/modules/effects/src/effects_metadata.ts","../../../../../../../../../../../execroot/ngrx/bazel-out/darwin-fastbuild/bin/modules/effects/src/on_run_effects.ts","../../../../../../../../../../../execroot/ngrx/bazel-out/darwin-fastbuild/bin/modules/effects/src/effects_resolver.ts","../../../../../../../../../../../execroot/ngrx/bazel-out/darwin-fastbuild/bin/modules/effects/src/actions.ts","../../../../../../../../../../../execroot/ngrx/bazel-out/darwin-fastbuild/bin/modules/effects/src/effect_notification.ts","../../../../../../../../../../../execroot/ngrx/bazel-out/darwin-fastbuild/bin/modules/effects/src/effect_sources.ts","../../../../../../../../../../../execroot/ngrx/bazel-out/darwin-fastbuild/bin/modules/effects/src/tokens.ts","../../../../../../../../../../../execroot/ngrx/bazel-out/darwin-fastbuild/bin/modules/effects/src/effects_runner.ts","../../../../../../../../../../../execroot/ngrx/bazel-out/darwin-fastbuild/bin/modules/effects/src/effects_root_module.ts","../../../../../../../../../../../execroot/ngrx/bazel-out/darwin-fastbuild/bin/modules/effects/src/effects_feature_module.ts","../../../../../../../../../../../execroot/ngrx/bazel-out/darwin-fastbuild/bin/modules/effects/src/effects_module.ts","../effects.ts"],"sourcesContent":["import { compose } from '@ngrx/store';\n\nconst METADATA_KEY = '__@ngrx/effects__';\n\nexport interface EffectMetadata<T> {\n  // Once TS is >= 2.8 replace with <Key extends Extract<keyof T, string>>\n  propertyName: string;\n  dispatch: boolean;\n}\n\nfunction getEffectMetadataEntries<T>(sourceProto: T): Array<EffectMetadata<T>> {\n  return sourceProto.constructor.hasOwnProperty(METADATA_KEY)\n    ? (sourceProto.constructor as any)[METADATA_KEY]\n    : [];\n}\n\nfunction setEffectMetadataEntries<T>(\n  sourceProto: T,\n  entries: Array<EffectMetadata<T>>\n) {\n  const constructor = sourceProto.constructor;\n  const meta: Array<EffectMetadata<T>> = constructor.hasOwnProperty(\n    METADATA_KEY\n  )\n    ? (constructor as any)[METADATA_KEY]\n    : Object.defineProperty(constructor, METADATA_KEY, { value: [] })[\n        METADATA_KEY\n      ];\n  Array.prototype.push.apply(meta, entries);\n}\n\nexport function Effect<T>({ dispatch = true } = {}): PropertyDecorator {\n  // Once TS is >= 2.8 replace with <Key extends Extract<keyof T, string>>\n  // for propertyName.\n  return function(target: T, propertyName: string) {\n    const metadata: EffectMetadata<T> = { propertyName, dispatch };\n    setEffectMetadataEntries<T>(target, [metadata]);\n  } as (target: {}, propertyName: string | symbol) => void;\n}\n\nexport function getSourceForInstance<T>(instance: T): T {\n  return Object.getPrototypeOf(instance);\n}\n\nexport function getSourceMetadata<T>(instance: T): Array<EffectMetadata<T>> {\n  return compose(\n    getEffectMetadataEntries,\n    getSourceForInstance\n  )(instance);\n}\n\n// Once TS is >= 2.8 replace with\n// {[key in <Key extends Extract<keyof T, string>>]?:  { dispatch: boolean } };\nexport type EffectsMetadata<T> = { [key: string]: { dispatch: boolean } };\n\nexport function getEffectsMetadata<T>(instance: T): EffectsMetadata<T> {\n  const metadata: EffectsMetadata<T> = {};\n\n  for (const { propertyName, dispatch } of getSourceMetadata(instance)) {\n    metadata[propertyName] = { dispatch };\n  }\n\n  return metadata;\n}\n","import { Observable } from 'rxjs';\n\nimport { EffectNotification } from './effect_notification';\nimport { getSourceForInstance } from './effects_metadata';\n\nexport type onRunEffectsFn = (\n  resolvedEffects$: Observable<EffectNotification>\n) => Observable<EffectNotification>;\n\nexport interface OnRunEffects {\n  ngrxOnRunEffects: onRunEffectsFn;\n}\n\nexport const onRunEffectsKey: keyof OnRunEffects = 'ngrxOnRunEffects';\n\nexport function isOnRunEffects(sourceInstance: {\n  [onRunEffectsKey]?: onRunEffectsFn;\n}): sourceInstance is OnRunEffects {\n  const source = getSourceForInstance(sourceInstance);\n\n  return (\n    onRunEffectsKey in source && typeof source[onRunEffectsKey] === 'function'\n  );\n}\n","import { Action } from '@ngrx/store';\nimport { merge, Notification, Observable } from 'rxjs';\nimport { ignoreElements, map, materialize } from 'rxjs/operators';\n\nimport { EffectNotification } from './effect_notification';\nimport { getSourceForInstance, getSourceMetadata } from './effects_metadata';\nimport { isOnRunEffects } from './on_run_effects';\n\nexport function mergeEffects(\n  sourceInstance: any\n): Observable<EffectNotification> {\n  const sourceName = getSourceForInstance(sourceInstance).constructor.name;\n\n  const observables: Observable<any>[] = getSourceMetadata(sourceInstance).map(\n    ({ propertyName, dispatch }): Observable<EffectNotification> => {\n      const observable: Observable<any> =\n        typeof sourceInstance[propertyName] === 'function'\n          ? sourceInstance[propertyName]()\n          : sourceInstance[propertyName];\n\n      if (dispatch === false) {\n        return observable.pipe(ignoreElements());\n      }\n\n      const materialized$ = observable.pipe(materialize());\n\n      return materialized$.pipe(\n        map(\n          (notification: Notification<Action>): EffectNotification => ({\n            effect: sourceInstance[propertyName],\n            notification,\n            propertyName,\n            sourceName,\n            sourceInstance,\n          })\n        )\n      );\n    }\n  );\n\n  return merge(...observables);\n}\n\nexport function resolveEffectSource(sourceInstance: any) {\n  const mergedEffects$ = mergeEffects(sourceInstance);\n\n  if (isOnRunEffects(sourceInstance)) {\n    return sourceInstance.ngrxOnRunEffects(mergedEffects$);\n  }\n\n  return mergedEffects$;\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Action, ScannedActionsSubject } from '@ngrx/store';\nimport { Observable, Operator, OperatorFunction } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable()\nexport class Actions<V = Action> extends Observable<V> {\n  constructor(@Inject(ScannedActionsSubject) source?: Observable<V>) {\n    super();\n\n    if (source) {\n      this.source = source;\n    }\n  }\n\n  lift<R>(operator: Operator<V, R>): Observable<R> {\n    const observable = new Actions<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  /**\n   * @deprecated from 6.1.0. Use the pipeable `ofType` operator instead.\n   */\n  ofType<V2 extends V = V>(...allowedTypes: string[]): Actions<V2> {\n    return ofType<any>(...allowedTypes)(this as Actions<any>) as Actions<V2>;\n  }\n}\n\nexport function ofType<T extends Action>(\n  ...allowedTypes: string[]\n): OperatorFunction<Action, T> {\n  return filter(\n    (action: Action): action is T =>\n      allowedTypes.some(type => type === action.type)\n  );\n}\n","import { ErrorHandler } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { Notification, Observable } from 'rxjs';\n\nexport interface EffectNotification {\n  effect: Observable<any> | (() => Observable<any>);\n  propertyName: string;\n  sourceName: string;\n  sourceInstance: any;\n  notification: Notification<Action | null | undefined>;\n}\n\nexport function verifyOutput(\n  output: EffectNotification,\n  reporter: ErrorHandler\n) {\n  reportErrorThrown(output, reporter);\n  reportInvalidActions(output, reporter);\n}\n\nfunction reportErrorThrown(output: EffectNotification, reporter: ErrorHandler) {\n  if (output.notification.kind === 'E') {\n    reporter.handleError(output.notification.error);\n  }\n}\n\nfunction reportInvalidActions(\n  output: EffectNotification,\n  reporter: ErrorHandler\n) {\n  if (output.notification.kind === 'N') {\n    const action = output.notification.value;\n    const isInvalidAction = !isAction(action);\n\n    if (isInvalidAction) {\n      reporter.handleError(\n        new Error(\n          `Effect ${getEffectName(\n            output\n          )} dispatched an invalid action: ${stringify(action)}`\n        )\n      );\n    }\n  }\n}\n\nfunction isAction(action: any): action is Action {\n  return action && action.type && typeof action.type === 'string';\n}\n\nfunction getEffectName({\n  propertyName,\n  sourceInstance,\n  sourceName,\n}: EffectNotification) {\n  const isMethod = typeof sourceInstance[propertyName] === 'function';\n\n  return `\"${sourceName}.${propertyName}${isMethod ? '()' : ''}\"`;\n}\n\nfunction stringify(action: Action | null | undefined) {\n  try {\n    return JSON.stringify(action);\n  } catch {\n    return action;\n  }\n}\n","import { ErrorHandler, Injectable } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { Notification, Observable, Subject } from 'rxjs';\nimport {\n  dematerialize,\n  exhaustMap,\n  filter,\n  groupBy,\n  map,\n  mergeMap,\n} from 'rxjs/operators';\n\nimport { verifyOutput } from './effect_notification';\nimport { getSourceForInstance } from './effects_metadata';\nimport { resolveEffectSource } from './effects_resolver';\n\n@Injectable()\nexport class EffectSources extends Subject<any> {\n  constructor(private errorHandler: ErrorHandler) {\n    super();\n  }\n\n  addEffects(effectSourceInstance: any) {\n    this.next(effectSourceInstance);\n  }\n\n  /**\n   * @internal\n   */\n  toActions(): Observable<Action> {\n    return this.pipe(\n      groupBy(getSourceForInstance),\n      mergeMap(source$ =>\n        source$.pipe(\n          exhaustMap(resolveEffectSource),\n          map(output => {\n            verifyOutput(output, this.errorHandler);\n\n            return output.notification;\n          }),\n          filter(\n            (notification): notification is Notification<Action> =>\n              notification.kind === 'N'\n          ),\n          dematerialize()\n        )\n      )\n    );\n  }\n}\n","import { InjectionToken, Type } from '@angular/core';\n\nexport const IMMEDIATE_EFFECTS = new InjectionToken<any[]>(\n  'ngrx/effects: Immediate Effects'\n);\nexport const ROOT_EFFECTS = new InjectionToken<Type<any>[]>(\n  'ngrx/effects: Root Effects'\n);\nexport const FEATURE_EFFECTS = new InjectionToken<any[][]>(\n  'ngrx/effects: Feature Effects'\n);\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Subscription } from 'rxjs';\n\nimport { EffectSources } from './effect_sources';\n\n@Injectable()\nexport class EffectsRunner implements OnDestroy {\n  private effectsSubscription: Subscription | null = null;\n\n  constructor(\n    private effectSources: EffectSources,\n    private store: Store<any>\n  ) {}\n\n  start() {\n    if (!this.effectsSubscription) {\n      this.effectsSubscription = this.effectSources\n        .toActions()\n        .subscribe(this.store);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.effectsSubscription) {\n      this.effectsSubscription.unsubscribe();\n      this.effectsSubscription = null;\n    }\n  }\n}\n","import { NgModule, Inject, Optional } from '@angular/core';\nimport {\n  StoreModule,\n  Store,\n  StoreRootModule,\n  StoreFeatureModule,\n} from '@ngrx/store';\nimport { EffectsRunner } from './effects_runner';\nimport { EffectSources } from './effect_sources';\nimport { ROOT_EFFECTS } from './tokens';\n\nexport const ROOT_EFFECTS_INIT = '@ngrx/effects/init';\n\n@NgModule({})\nexport class EffectsRootModule {\n  constructor(\n    private sources: EffectSources,\n    runner: EffectsRunner,\n    store: Store<any>,\n    @Inject(ROOT_EFFECTS) rootEffects: any[],\n    @Optional() storeRootModule: StoreRootModule,\n    @Optional() storeFeatureModule: StoreFeatureModule\n  ) {\n    runner.start();\n\n    rootEffects.forEach(effectSourceInstance =>\n      sources.addEffects(effectSourceInstance)\n    );\n\n    store.dispatch({ type: ROOT_EFFECTS_INIT });\n  }\n\n  addEffects(effectSourceInstance: any) {\n    this.sources.addEffects(effectSourceInstance);\n  }\n}\n","import { NgModule, Inject, Optional } from '@angular/core';\nimport { StoreRootModule, StoreFeatureModule } from '@ngrx/store';\nimport { EffectsRootModule } from './effects_root_module';\nimport { FEATURE_EFFECTS } from './tokens';\n\n@NgModule({})\nexport class EffectsFeatureModule {\n  constructor(\n    private root: EffectsRootModule,\n    @Inject(FEATURE_EFFECTS) effectSourceGroups: any[][],\n    @Optional() storeRootModule: StoreRootModule,\n    @Optional() storeFeatureModule: StoreFeatureModule\n  ) {\n    effectSourceGroups.forEach(group =>\n      group.forEach(effectSourceInstance =>\n        root.addEffects(effectSourceInstance)\n      )\n    );\n  }\n}\n","import { NgModule, ModuleWithProviders, Type } from '@angular/core';\nimport { EffectSources } from './effect_sources';\nimport { Actions } from './actions';\nimport { ROOT_EFFECTS, FEATURE_EFFECTS } from './tokens';\nimport { EffectsFeatureModule } from './effects_feature_module';\nimport { EffectsRootModule } from './effects_root_module';\nimport { EffectsRunner } from './effects_runner';\n\n@NgModule({})\nexport class EffectsModule {\n  static forFeature(featureEffects: Type<any>[]): ModuleWithProviders {\n    return {\n      ngModule: EffectsFeatureModule,\n      providers: [\n        featureEffects,\n        {\n          provide: FEATURE_EFFECTS,\n          multi: true,\n          deps: featureEffects,\n          useFactory: createSourceInstances,\n        },\n      ],\n    };\n  }\n\n  static forRoot(rootEffects: Type<any>[]): ModuleWithProviders {\n    return {\n      ngModule: EffectsRootModule,\n      providers: [\n        EffectsRunner,\n        EffectSources,\n        Actions,\n        rootEffects,\n        {\n          provide: ROOT_EFFECTS,\n          deps: rootEffects,\n          useFactory: createSourceInstances,\n        },\n      ],\n    };\n  }\n}\n\nexport function createSourceInstances(...instances: any[]) {\n  return instances;\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {EffectsFeatureModule as Éµngrx_modules_effects_effects_c} from './src/effects_feature_module';\nexport {createSourceInstances as Éµngrx_modules_effects_effects_a} from './src/effects_module';\nexport {EffectsRootModule as Éµngrx_modules_effects_effects_b} from './src/effects_root_module';\nexport {EffectsRunner as Éµngrx_modules_effects_effects_f} from './src/effects_runner';\nexport {FEATURE_EFFECTS as Éµngrx_modules_effects_effects_e,ROOT_EFFECTS as Éµngrx_modules_effects_effects_d} from './src/tokens';"],"names":[],"mappings":"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"}