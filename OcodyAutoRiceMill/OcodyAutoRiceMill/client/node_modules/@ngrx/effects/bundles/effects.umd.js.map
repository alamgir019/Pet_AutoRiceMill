{"version":3,"file":"effects.umd.js","sources":["../../../../../../../../../../execroot/ngrx/modules/effects/src/effects_metadata.ts","../../../../../../../../../../execroot/ngrx/modules/effects/src/on_run_effects.ts","../../../../../../../../../../execroot/ngrx/modules/effects/src/effects_resolver.ts","../../../../../../../../../../execroot/ngrx/modules/effects/src/actions.ts","../../../../../../../../../../execroot/ngrx/modules/effects/src/effect_notification.ts","../../../../../../../../../../execroot/ngrx/modules/effects/src/effect_sources.ts","../../../../../../../../../../execroot/ngrx/modules/effects/src/tokens.ts","../../../../../../../../../../execroot/ngrx/modules/effects/src/effects_runner.ts","../../../../../../../../../../execroot/ngrx/modules/effects/src/effects_root_module.ts","../../../../../../../../../../execroot/ngrx/modules/effects/src/effects_feature_module.ts","../../../../../../../../../../execroot/ngrx/modules/effects/src/effects_module.ts","../../../../../../../../../../execroot/ngrx/modules/effects/effects.ts"],"sourcesContent":["import { compose } from '@ngrx/store';\n\nconst METADATA_KEY = '__@ngrx/effects__';\n\nexport interface EffectMetadata<T> {\n  // Once TS is >= 2.8 replace with <Key extends Extract<keyof T, string>>\n  propertyName: string;\n  dispatch: boolean;\n}\n\nfunction getEffectMetadataEntries<T>(sourceProto: T): Array<EffectMetadata<T>> {\n  return sourceProto.constructor.hasOwnProperty(METADATA_KEY)\n    ? (sourceProto.constructor as any)[METADATA_KEY]\n    : [];\n}\n\nfunction setEffectMetadataEntries<T>(\n  sourceProto: T,\n  entries: Array<EffectMetadata<T>>\n) {\n  const constructor = sourceProto.constructor;\n  const meta: Array<EffectMetadata<T>> = constructor.hasOwnProperty(\n    METADATA_KEY\n  )\n    ? (constructor as any)[METADATA_KEY]\n    : Object.defineProperty(constructor, METADATA_KEY, { value: [] })[\n        METADATA_KEY\n      ];\n  Array.prototype.push.apply(meta, entries);\n}\n\nexport function Effect<T>({ dispatch = true } = {}): PropertyDecorator {\n  // Once TS is >= 2.8 replace with <Key extends Extract<keyof T, string>>\n  // for propertyName.\n  return function(target: T, propertyName: string) {\n    const metadata: EffectMetadata<T> = { propertyName, dispatch };\n    setEffectMetadataEntries<T>(target, [metadata]);\n  } as (target: {}, propertyName: string | symbol) => void;\n}\n\nexport function getSourceForInstance<T>(instance: T): T {\n  return Object.getPrototypeOf(instance);\n}\n\nexport function getSourceMetadata<T>(instance: T): Array<EffectMetadata<T>> {\n  return compose(\n    getEffectMetadataEntries,\n    getSourceForInstance\n  )(instance);\n}\n\n// Once TS is >= 2.8 replace with\n// {[key in <Key extends Extract<keyof T, string>>]?:  { dispatch: boolean } };\nexport type EffectsMetadata<T> = { [key: string]: { dispatch: boolean } };\n\nexport function getEffectsMetadata<T>(instance: T): EffectsMetadata<T> {\n  const metadata: EffectsMetadata<T> = {};\n\n  for (const { propertyName, dispatch } of getSourceMetadata(instance)) {\n    metadata[propertyName] = { dispatch };\n  }\n\n  return metadata;\n}\n","import { Observable } from 'rxjs';\n\nimport { EffectNotification } from './effect_notification';\nimport { getSourceForInstance } from './effects_metadata';\n\nexport type onRunEffectsFn = (\n  resolvedEffects$: Observable<EffectNotification>\n) => Observable<EffectNotification>;\n\nexport interface OnRunEffects {\n  ngrxOnRunEffects: onRunEffectsFn;\n}\n\nexport const onRunEffectsKey: keyof OnRunEffects = 'ngrxOnRunEffects';\n\nexport function isOnRunEffects(sourceInstance: {\n  [onRunEffectsKey]?: onRunEffectsFn;\n}): sourceInstance is OnRunEffects {\n  const source = getSourceForInstance(sourceInstance);\n\n  return (\n    onRunEffectsKey in source && typeof source[onRunEffectsKey] === 'function'\n  );\n}\n","import { Action } from '@ngrx/store';\nimport { merge, Notification, Observable } from 'rxjs';\nimport { ignoreElements, map, materialize } from 'rxjs/operators';\n\nimport { EffectNotification } from './effect_notification';\nimport { getSourceForInstance, getSourceMetadata } from './effects_metadata';\nimport { isOnRunEffects } from './on_run_effects';\n\nexport function mergeEffects(\n  sourceInstance: any\n): Observable<EffectNotification> {\n  const sourceName = getSourceForInstance(sourceInstance).constructor.name;\n\n  const observables: Observable<any>[] = getSourceMetadata(sourceInstance).map(\n    ({ propertyName, dispatch }): Observable<EffectNotification> => {\n      const observable: Observable<any> =\n        typeof sourceInstance[propertyName] === 'function'\n          ? sourceInstance[propertyName]()\n          : sourceInstance[propertyName];\n\n      if (dispatch === false) {\n        return observable.pipe(ignoreElements());\n      }\n\n      const materialized$ = observable.pipe(materialize());\n\n      return materialized$.pipe(\n        map(\n          (notification: Notification<Action>): EffectNotification => ({\n            effect: sourceInstance[propertyName],\n            notification,\n            propertyName,\n            sourceName,\n            sourceInstance,\n          })\n        )\n      );\n    }\n  );\n\n  return merge(...observables);\n}\n\nexport function resolveEffectSource(sourceInstance: any) {\n  const mergedEffects$ = mergeEffects(sourceInstance);\n\n  if (isOnRunEffects(sourceInstance)) {\n    return sourceInstance.ngrxOnRunEffects(mergedEffects$);\n  }\n\n  return mergedEffects$;\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Action, ScannedActionsSubject } from '@ngrx/store';\nimport { Observable, Operator, OperatorFunction } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable()\nexport class Actions<V = Action> extends Observable<V> {\n  constructor(@Inject(ScannedActionsSubject) source?: Observable<V>) {\n    super();\n\n    if (source) {\n      this.source = source;\n    }\n  }\n\n  lift<R>(operator: Operator<V, R>): Observable<R> {\n    const observable = new Actions<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  /**\n   * @deprecated from 6.1.0. Use the pipeable `ofType` operator instead.\n   */\n  ofType<V2 extends V = V>(...allowedTypes: string[]): Actions<V2> {\n    return ofType<any>(...allowedTypes)(this as Actions<any>) as Actions<V2>;\n  }\n}\n\nexport function ofType<T extends Action>(\n  ...allowedTypes: string[]\n): OperatorFunction<Action, T> {\n  return filter(\n    (action: Action): action is T =>\n      allowedTypes.some(type => type === action.type)\n  );\n}\n","import { ErrorHandler } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { Notification, Observable } from 'rxjs';\n\nexport interface EffectNotification {\n  effect: Observable<any> | (() => Observable<any>);\n  propertyName: string;\n  sourceName: string;\n  sourceInstance: any;\n  notification: Notification<Action | null | undefined>;\n}\n\nexport function verifyOutput(\n  output: EffectNotification,\n  reporter: ErrorHandler\n) {\n  reportErrorThrown(output, reporter);\n  reportInvalidActions(output, reporter);\n}\n\nfunction reportErrorThrown(output: EffectNotification, reporter: ErrorHandler) {\n  if (output.notification.kind === 'E') {\n    reporter.handleError(output.notification.error);\n  }\n}\n\nfunction reportInvalidActions(\n  output: EffectNotification,\n  reporter: ErrorHandler\n) {\n  if (output.notification.kind === 'N') {\n    const action = output.notification.value;\n    const isInvalidAction = !isAction(action);\n\n    if (isInvalidAction) {\n      reporter.handleError(\n        new Error(\n          `Effect ${getEffectName(\n            output\n          )} dispatched an invalid action: ${stringify(action)}`\n        )\n      );\n    }\n  }\n}\n\nfunction isAction(action: any): action is Action {\n  return action && action.type && typeof action.type === 'string';\n}\n\nfunction getEffectName({\n  propertyName,\n  sourceInstance,\n  sourceName,\n}: EffectNotification) {\n  const isMethod = typeof sourceInstance[propertyName] === 'function';\n\n  return `\"${sourceName}.${propertyName}${isMethod ? '()' : ''}\"`;\n}\n\nfunction stringify(action: Action | null | undefined) {\n  try {\n    return JSON.stringify(action);\n  } catch {\n    return action;\n  }\n}\n","import { ErrorHandler, Injectable } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { Notification, Observable, Subject } from 'rxjs';\nimport {\n  dematerialize,\n  exhaustMap,\n  filter,\n  groupBy,\n  map,\n  mergeMap,\n} from 'rxjs/operators';\n\nimport { verifyOutput } from './effect_notification';\nimport { getSourceForInstance } from './effects_metadata';\nimport { resolveEffectSource } from './effects_resolver';\n\n@Injectable()\nexport class EffectSources extends Subject<any> {\n  constructor(private errorHandler: ErrorHandler) {\n    super();\n  }\n\n  addEffects(effectSourceInstance: any) {\n    this.next(effectSourceInstance);\n  }\n\n  /**\n   * @internal\n   */\n  toActions(): Observable<Action> {\n    return this.pipe(\n      groupBy(getSourceForInstance),\n      mergeMap(source$ =>\n        source$.pipe(\n          exhaustMap(resolveEffectSource),\n          map(output => {\n            verifyOutput(output, this.errorHandler);\n\n            return output.notification;\n          }),\n          filter(\n            (notification): notification is Notification<Action> =>\n              notification.kind === 'N'\n          ),\n          dematerialize()\n        )\n      )\n    );\n  }\n}\n","import { InjectionToken, Type } from '@angular/core';\n\nexport const IMMEDIATE_EFFECTS = new InjectionToken<any[]>(\n  'ngrx/effects: Immediate Effects'\n);\nexport const ROOT_EFFECTS = new InjectionToken<Type<any>[]>(\n  'ngrx/effects: Root Effects'\n);\nexport const FEATURE_EFFECTS = new InjectionToken<any[][]>(\n  'ngrx/effects: Feature Effects'\n);\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Subscription } from 'rxjs';\n\nimport { EffectSources } from './effect_sources';\n\n@Injectable()\nexport class EffectsRunner implements OnDestroy {\n  private effectsSubscription: Subscription | null = null;\n\n  constructor(\n    private effectSources: EffectSources,\n    private store: Store<any>\n  ) {}\n\n  start() {\n    if (!this.effectsSubscription) {\n      this.effectsSubscription = this.effectSources\n        .toActions()\n        .subscribe(this.store);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.effectsSubscription) {\n      this.effectsSubscription.unsubscribe();\n      this.effectsSubscription = null;\n    }\n  }\n}\n","import { NgModule, Inject, Optional } from '@angular/core';\nimport {\n  StoreModule,\n  Store,\n  StoreRootModule,\n  StoreFeatureModule,\n} from '@ngrx/store';\nimport { EffectsRunner } from './effects_runner';\nimport { EffectSources } from './effect_sources';\nimport { ROOT_EFFECTS } from './tokens';\n\nexport const ROOT_EFFECTS_INIT = '@ngrx/effects/init';\n\n@NgModule({})\nexport class EffectsRootModule {\n  constructor(\n    private sources: EffectSources,\n    runner: EffectsRunner,\n    store: Store<any>,\n    @Inject(ROOT_EFFECTS) rootEffects: any[],\n    @Optional() storeRootModule: StoreRootModule,\n    @Optional() storeFeatureModule: StoreFeatureModule\n  ) {\n    runner.start();\n\n    rootEffects.forEach(effectSourceInstance =>\n      sources.addEffects(effectSourceInstance)\n    );\n\n    store.dispatch({ type: ROOT_EFFECTS_INIT });\n  }\n\n  addEffects(effectSourceInstance: any) {\n    this.sources.addEffects(effectSourceInstance);\n  }\n}\n","import { NgModule, Inject, Optional } from '@angular/core';\nimport { StoreRootModule, StoreFeatureModule } from '@ngrx/store';\nimport { EffectsRootModule } from './effects_root_module';\nimport { FEATURE_EFFECTS } from './tokens';\n\n@NgModule({})\nexport class EffectsFeatureModule {\n  constructor(\n    private root: EffectsRootModule,\n    @Inject(FEATURE_EFFECTS) effectSourceGroups: any[][],\n    @Optional() storeRootModule: StoreRootModule,\n    @Optional() storeFeatureModule: StoreFeatureModule\n  ) {\n    effectSourceGroups.forEach(group =>\n      group.forEach(effectSourceInstance =>\n        root.addEffects(effectSourceInstance)\n      )\n    );\n  }\n}\n","import { NgModule, ModuleWithProviders, Type } from '@angular/core';\nimport { EffectSources } from './effect_sources';\nimport { Actions } from './actions';\nimport { ROOT_EFFECTS, FEATURE_EFFECTS } from './tokens';\nimport { EffectsFeatureModule } from './effects_feature_module';\nimport { EffectsRootModule } from './effects_root_module';\nimport { EffectsRunner } from './effects_runner';\n\n@NgModule({})\nexport class EffectsModule {\n  static forFeature(featureEffects: Type<any>[]): ModuleWithProviders {\n    return {\n      ngModule: EffectsFeatureModule,\n      providers: [\n        featureEffects,\n        {\n          provide: FEATURE_EFFECTS,\n          multi: true,\n          deps: featureEffects,\n          useFactory: createSourceInstances,\n        },\n      ],\n    };\n  }\n\n  static forRoot(rootEffects: Type<any>[]): ModuleWithProviders {\n    return {\n      ngModule: EffectsRootModule,\n      providers: [\n        EffectsRunner,\n        EffectSources,\n        Actions,\n        rootEffects,\n        {\n          provide: ROOT_EFFECTS,\n          deps: rootEffects,\n          useFactory: createSourceInstances,\n        },\n      ],\n    };\n  }\n}\n\nexport function createSourceInstances(...instances: any[]) {\n  return instances;\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {EffectsFeatureModule as Éµngrx_modules_effects_effects_c} from './src/effects_feature_module';\nexport {createSourceInstances as Éµngrx_modules_effects_effects_a} from './src/effects_module';\nexport {EffectsRootModule as Éµngrx_modules_effects_effects_b} from './src/effects_root_module';\nexport {EffectsRunner as Éµngrx_modules_effects_effects_f} from './src/effects_runner';\nexport {FEATURE_EFFECTS as Éµngrx_modules_effects_effects_e,ROOT_EFFECTS as Éµngrx_modules_effects_effects_d} from './src/tokens';"],"names":["compose","ignoreElements","materialize","map","merge","Injectable","Observable","Inject","ScannedActionsSubject","filter","__extends","groupBy","mergeMap","exhaustMap","dematerialize","ErrorHandler","Subject","InjectionToken","store","Store","NgModule","StoreRootModule","Optional","StoreFeatureModule"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,IAEA,IAAM,YAAY,GAAG,mBAAmB,CAAC;IAQzC,kCAAqC,WAAc;QACjD,OAAO,WAAW,CAAC,WAAW,CAAC,cAAc,CAAC,YAAY,CAAC;cACtD,WAAW,CAAC,WAAmB,CAAC,YAAY,CAAC;cAC9C,EAAE,CAAC;KACR;IAED,kCACE,WAAc,EACd,OAAiC;QAEjC,IAAM,WAAW,GAAG,WAAW,CAAC,WAAW,CAAC;QAC5C,IAAM,IAAI,GAA6B,WAAW,CAAC,cAAc,CAC/D,YAAY,CACb;cACI,WAAmB,CAAC,YAAY,CAAC;cAClC,MAAM,CAAC,cAAc,CAAC,WAAW,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAC7D,YAAY,CACb,CAAC;QACN,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;KAC3C;AAED,oBAA0B,EAAwB;YAAtB,uCAAe,EAAf,oCAAe;;;QAGzC,OAAO,UAAS,MAAS,EAAE,YAAoB;YAC7C,IAAM,QAAQ,GAAsB,EAAE,YAAY,cAAA,EAAE,QAAQ,UAAA,EAAE,CAAC;YAC/D,wBAAwB,CAAI,MAAM,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;SACM,CAAC;KAC1D;AAED,kCAAwC,QAAW;QACjD,OAAO,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;KACxC;AAED,+BAAqC,QAAW;QAC9C,OAAOA,aAAO,CACZ,wBAAwB,EACxB,oBAAoB,CACrB,CAAC,QAAQ,CAAC,CAAC;KACb;AAMD,gCAAsC,QAAW;QAC/C,IAAM,QAAQ,GAAuB,EAAE,CAAC;;YAExC,KAAyC,IAAA,KAAA,SAAA,iBAAiB,CAAC,QAAQ,CAAC,CAAA,gBAAA;mCAAvD,8BAAY,EAAE,sBAAQ;gBACjC,QAAQ,CAAC,YAAY,CAAC,GAAG,EAAE,QAAQ,UAAA,EAAE,CAAC;aACvC;;;;;;;;;QAED,OAAO,QAAQ,CAAC;;KACjB;;IClDM,IAAM,eAAe,GAAuB,kBAAkB,CAAC;AAEtE,4BAA+B,cAE9B;QACC,IAAM,MAAM,GAAG,oBAAoB,CAAC,cAAc,CAAC,CAAC;QAEpD,QACE,eAAe,IAAI,MAAM,IAAI,OAAO,MAAM,CAAC,eAAe,CAAC,KAAK,UAAU,EAC1E;KACH;;;;;;;;;;;;;;;;;;;;;;ACtBD,0BAQE,cAAmB;QAEnB,IAAM,UAAU,GAAG,oBAAoB,CAAC,cAAc,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC;QAEzE,IAAM,WAAW,GAAsB,iBAAiB,CAAC,cAAc,CAAC,CAAC,GAAG,CAC1E,UAAC,EAA0B;gBAAxB,8BAAY,EAAE,sBAAQ;YACvB,IAAM,UAAU,GACd,OAAO,cAAc,CAAC,YAAY,CAAC,KAAK,UAAU;kBAC9C,cAAc,CAAC,YAAY,CAAC,EAAE;kBAC9B,cAAc,CAAC,YAAY,CAAC,CAAC;YAEnC,IAAI,QAAQ,KAAK,KAAK,EAAE;gBACtB,OAAO,UAAU,CAAC,IAAI,CAACC,wBAAc,EAAE,CAAC,CAAC;aAC1C;YAED,IAAM,aAAa,GAAG,UAAU,CAAC,IAAI,CAACC,qBAAW,EAAE,CAAC,CAAC;YAErD,OAAO,aAAa,CAAC,IAAI,CACvBC,aAAG,CACD,UAAC,YAAkC;gBAAyB,QAAC;oBAC3D,MAAM,EAAE,cAAc,CAAC,YAAY,CAAC;oBACpC,YAAY,cAAA;oBACZ,YAAY,cAAA;oBACZ,UAAU,YAAA;oBACV,cAAc,gBAAA;iBACf;aAAC,CACH,CACF,CAAC;SACH,CACF,CAAC;QAEF,OAAOC,UAAK,wBAAI,WAAW,GAAE;KAC9B;AAED,iCAAoC,cAAmB;QACrD,IAAM,cAAc,GAAG,YAAY,CAAC,cAAc,CAAC,CAAC;QAEpD,IAAI,cAAc,CAAC,cAAc,CAAC,EAAE;YAClC,OAAO,cAAc,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;SACxD;QAED,OAAO,cAAc,CAAC;KACvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnDD;QAMyC,2BAAa;QACpD,iBAA2C;YAA3C,YACE,iBAAO,SAKR;YAHC,IAAI,MAAM,EAAE;gBACV,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;aACtB;;SACF;QAED,sBAAI,GAAJ,UAAQ,QAAwB;YAC9B,IAAM,UAAU,GAAG,IAAI,OAAO,EAAK,CAAC;YACpC,UAAU,CAAC,MAAM,GAAG,IAAI,CAAC;YACzB,UAAU,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAC/B,OAAO,UAAU,CAAC;SACnB;;;;;;;QAKD,wBAAM;;;QAAN;YAAyB,sBAAyB;iBAAzB,UAAyB,EAAzB,qBAAyB,EAAzB,IAAyB;gBAAzB,iCAAyB;;YAChD,OAAO,MAAM,0BAAS,YAAY,GAAE,IAAoB,CAAgB,CAAC;SAC1E;;oBAtBFC,eAAU;;;;oBAHFC,eAAU,uBAKJC,WAAM,SAACC,2BAAqB;;sBAP3C;MAMyCF,eAAU;;QAyBjD,sBAAyB;aAAzB,UAAyB,EAAzB,qBAAyB,EAAzB,IAAyB;YAAzB,iCAAyB;;QAEzB,OAAOG,gBAAM,CACX,UAAC,MAAc;YACb,OAAA,YAAY,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,KAAK,MAAM,CAAC,IAAI,GAAA,CAAC;SAAA,CAClD,CAAC;KACH;;0BCxBC,MAA0B,EAC1B,QAAsB;QAEtB,iBAAiB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACpC,oBAAoB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;KACxC;IAED,2BAA2B,MAA0B,EAAE,QAAsB;QAC3E,IAAI,MAAM,CAAC,YAAY,CAAC,IAAI,KAAK,GAAG,EAAE;YACpC,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;SACjD;KACF;IAED,8BACE,MAA0B,EAC1B,QAAsB;QAEtB,IAAI,MAAM,CAAC,YAAY,CAAC,IAAI,KAAK,GAAG,EAAE;YACpC,IAAM,MAAM,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC;YACzC,IAAM,eAAe,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAE1C,IAAI,eAAe,EAAE;gBACnB,QAAQ,CAAC,WAAW,CAClB,IAAI,KAAK,CACP,YAAU,aAAa,CACrB,MAAM,CACP,uCAAkC,SAAS,CAAC,MAAM,CAAG,CACvD,CACF,CAAC;aACH;SACF;KACF;IAED,kBAAkB,MAAW;QAC3B,OAAO,MAAM,IAAI,MAAM,CAAC,IAAI,IAAI,OAAO,MAAM,CAAC,IAAI,KAAK,QAAQ,CAAC;KACjE;IAED,uBAAuB,EAIF;YAHnB,8BAAY,EACZ,kCAAc,EACd,0BAAU;QAEV,IAAM,QAAQ,GAAG,OAAO,cAAc,CAAC,YAAY,CAAC,KAAK,UAAU,CAAC;QAEpE,OAAO,OAAI,UAAU,SAAI,YAAY,IAAG,QAAQ,GAAG,IAAI,GAAG,EAAE,QAAG,CAAC;KACjE;IAED,mBAAmB,MAAiC;QAClD,IAAI;YACF,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;SAC/B;QAAC,OAAO,IAAD;YACN,OAAO,MAAM,CAAC;SACf;KACF;;;;;;;;;;;;AClED;QAiBmCC,mCAAY;QAC7C,uBAAoB,YAA0B;YAA9C,YACE,iBAAO,SACR;YAFmB,kBAAY,GAAZ,YAAY,CAAc;;SAE7C;QAED,kCAAU,GAAV,UAAW,oBAAyB;YAClC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;SACjC;;;;;;;QAKD,iCAAS;;;QAAT;YAAA,iBAmBC;YAlBC,OAAO,IAAI,CAAC,IAAI,CACdC,iBAAO,CAAC,oBAAoB,CAAC,EAC7BC,kBAAQ,CAAC,UAAA,OAAO;gBACd,OAAA,OAAO,CAAC,IAAI,CACVC,oBAAU,CAAC,mBAAmB,CAAC,EAC/BV,aAAG,CAAC,UAAA,MAAM;oBACR,YAAY,CAAC,MAAM,EAAE,KAAI,CAAC,YAAY,CAAC,CAAC;oBAExC,OAAO,MAAM,CAAC,YAAY,CAAC;iBAC5B,CAAC,EACFM,gBAAM,CACJ,UAAC,YAAY;oBACX,OAAA,YAAY,CAAC,IAAI,KAAK,GAAG;iBAAA,CAC5B,EACDK,uBAAa,EAAE,CAChB;aAAA,CACF,CACF,CAAC;SACH;;oBAhCFT,eAAU;;;;oBAhBFU,iBAAY;;4BAArB;MAiBmCC,YAAO;;ICfnC,IAAM,iBAAiB,GAAG,IAAIC,mBAAc,CACjD,iCAAiC,CAClC,CAAC;AACF,QAAa,YAAY,GAAG,IAAIA,mBAAc,CAC5C,4BAA4B,CAC7B,CAAC;AACF,QAAa,eAAe,GAAG,IAAIA,mBAAc,CAC/C,+BAA+B,CAChC;;;QCAC,uBACU,aAA4B,EAC5BC,QAAiB;YADjB,kBAAa,GAAb,aAAa,CAAe;YAC5B,UAAK,GAALA,QAAK,CAAY;uCAJwB,IAAI;SAKnD;QAEJ,6BAAK,GAAL;YACE,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;gBAC7B,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,aAAa;qBAC1C,SAAS,EAAE;qBACX,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAC1B;SACF;QAED,mCAAW,GAAX;YACE,IAAI,IAAI,CAAC,mBAAmB,EAAE;gBAC5B,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,CAAC;gBACvC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;aACjC;SACF;;oBAtBFb,eAAU;;;;oBAFF,aAAa;oBAHbc,WAAK;;4BADd;;;QCWa,iBAAiB,GAAG,oBAAoB,CAAC;;QAIpD,2BACU,OAAsB,EAC9B,MAAqB,EACrBD,QAAiB,EACK,aACV,iBACA;YALJ,YAAO,GAAP,OAAO,CAAe;YAO9B,MAAM,CAAC,KAAK,EAAE,CAAC;YAEf,WAAW,CAAC,OAAO,CAAC,UAAA,oBAAoB;gBACtC,OAAA,OAAO,CAAC,UAAU,CAAC,oBAAoB,CAAC;aAAA,CACzC,CAAC;YAEFA,QAAK,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,iBAAiB,EAAE,CAAC,CAAC;SAC7C;QAED,sCAAU,GAAV,UAAW,oBAAyB;YAClC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,oBAAoB,CAAC,CAAC;SAC/C;;oBArBFE,aAAQ,SAAC,EAAE;;;;oBALH,aAAa;oBADb,aAAa;oBAJpBD,WAAK;gDAgBFZ,WAAM,SAAC,YAAY;oBAftBc,qBAAe,uBAgBZC,aAAQ;oBAfXC,wBAAkB,uBAgBfD,aAAQ;;gCArBb;;;;QCOE,8BACU,IAAuB,EACN,oBACb,iBACA;YAHJ,SAAI,GAAJ,IAAI,CAAmB;YAK/B,kBAAkB,CAAC,OAAO,CAAC,UAAA,KAAK;gBAC9B,OAAA,KAAK,CAAC,OAAO,CAAC,UAAA,oBAAoB;oBAChC,OAAA,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC;iBAAA,CACtC;aAAA,CACF,CAAC;SACH;;oBAbFF,aAAQ,SAAC,EAAE;;;;oBAHH,iBAAiB;gDAOrBb,WAAM,SAAC,eAAe;oBARlBc,qBAAe,uBASnBC,aAAQ;oBATaC,wBAAkB,uBAUvCD,aAAQ;;mCAXb;;;;;;QCUS,wBAAU,GAAjB,UAAkB,cAA2B;YAC3C,OAAO;gBACL,QAAQ,EAAE,oBAAoB;gBAC9B,SAAS,EAAE;oBACT,cAAc;oBACd;wBACE,OAAO,EAAE,eAAe;wBACxB,KAAK,EAAE,IAAI;wBACX,IAAI,EAAE,cAAc;wBACpB,UAAU,EAAE,qBAAqB;qBAClC;iBACF;aACF,CAAC;SACH;QAEM,qBAAO,GAAd,UAAe,WAAwB;YACrC,OAAO;gBACL,QAAQ,EAAE,iBAAiB;gBAC3B,SAAS,EAAE;oBACT,aAAa;oBACb,aAAa;oBACb,OAAO;oBACP,WAAW;oBACX;wBACE,OAAO,EAAE,YAAY;wBACrB,IAAI,EAAE,WAAW;wBACjB,UAAU,EAAE,qBAAqB;qBAClC;iBACF;aACF,CAAC;SACH;;oBAhCFF,aAAQ,SAAC,EAAE;;4BARZ;;;QA2CsC,mBAAmB;aAAnB,UAAmB,EAAnB,qBAAmB,EAAnB,IAAmB;YAAnB,8BAAmB;;QACvD,OAAO,SAAS,CAAC;KAClB;;;;;;;;IC7CD;;OAEG;;;;;;;;;;;;;;;;;;;;;;;;;"}