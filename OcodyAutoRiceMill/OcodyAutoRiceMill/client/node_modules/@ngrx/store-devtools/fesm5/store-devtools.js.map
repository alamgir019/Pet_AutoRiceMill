{"version":3,"file":"store-devtools.js","sources":["../../../../../../../../../../../execroot/ngrx/modules/store-devtools/src/config.ts","../../../../../../../../../../../execroot/ngrx/modules/store-devtools/src/actions.ts","../../../../../../../../../../../execroot/ngrx/modules/store-devtools/src/utils.ts","../../../../../../../../../../../execroot/ngrx/modules/store-devtools/src/extension.ts","../../../../../../../../../../../execroot/ngrx/modules/store-devtools/src/reducer.ts","../../../../../../../../../../../execroot/ngrx/modules/store-devtools/src/devtools.ts","../../../../../../../../../../../execroot/ngrx/modules/store-devtools/src/instrument.ts","../../../../../../../../../../../execroot/ngrx/modules/store-devtools/store-devtools.ts"],"sourcesContent":["import { ActionReducer, Action } from '@ngrx/store';\nimport { InjectionToken, Type } from '@angular/core';\n\nexport type ActionSanitizer = (action: Action, id: number) => Action;\nexport type StateSanitizer = (state: any, index: number) => any;\nexport type SerializationOptions = {\n  options?: boolean | any;\n  replacer?: (key: any, value: any) => {};\n  reviver?: (key: any, value: any) => {};\n  immutable?: any;\n  refs?: Array<any>;\n};\n\nexport class StoreDevtoolsConfig {\n  maxAge: number | false;\n  monitor: ActionReducer<any, any>;\n  actionSanitizer?: ActionSanitizer;\n  stateSanitizer?: StateSanitizer;\n  name?: string;\n  serialize?: boolean | SerializationOptions;\n  logOnly?: boolean;\n  features?: any;\n}\n\nexport const STORE_DEVTOOLS_CONFIG = new InjectionToken<StoreDevtoolsConfig>(\n  '@ngrx/devtools Options'\n);\nexport const INITIAL_OPTIONS = new InjectionToken<StoreDevtoolsConfig>(\n  '@ngrx/devtools Initial Config'\n);\n\nexport type StoreDevtoolsOptions =\n  | Partial<StoreDevtoolsConfig>\n  | (() => Partial<StoreDevtoolsConfig>);\n","import { Action } from '@ngrx/store';\n\nexport const PERFORM_ACTION = 'PERFORM_ACTION';\nexport const REFRESH = 'REFRESH';\nexport const RESET = 'RESET';\nexport const ROLLBACK = 'ROLLBACK';\nexport const COMMIT = 'COMMIT';\nexport const SWEEP = 'SWEEP';\nexport const TOGGLE_ACTION = 'TOGGLE_ACTION';\nexport const SET_ACTIONS_ACTIVE = 'SET_ACTIONS_ACTIVE';\nexport const JUMP_TO_STATE = 'JUMP_TO_STATE';\nexport const JUMP_TO_ACTION = 'JUMP_TO_ACTION';\nexport const IMPORT_STATE = 'IMPORT_STATE';\n\nexport class PerformAction implements Action {\n  readonly type = PERFORM_ACTION;\n\n  constructor(public action: Action, public timestamp: number) {\n    if (typeof action.type === 'undefined') {\n      throw new Error(\n        'Actions may not have an undefined \"type\" property. ' +\n          'Have you misspelled a constant?'\n      );\n    }\n  }\n}\n\nexport class Refresh implements Action {\n  readonly type = REFRESH;\n}\n\nexport class Reset implements Action {\n  readonly type = RESET;\n\n  constructor(public timestamp: number) {}\n}\n\nexport class Rollback implements Action {\n  readonly type = ROLLBACK;\n\n  constructor(public timestamp: number) {}\n}\n\nexport class Commit implements Action {\n  readonly type = COMMIT;\n\n  constructor(public timestamp: number) {}\n}\n\nexport class Sweep implements Action {\n  readonly type = SWEEP;\n}\n\nexport class ToggleAction implements Action {\n  readonly type = TOGGLE_ACTION;\n\n  constructor(public id: number) {}\n}\n\nexport class SetActionsActive implements Action {\n  readonly type = SET_ACTIONS_ACTIVE;\n\n  constructor(\n    public start: number,\n    public end: number,\n    public active: boolean = true\n  ) {}\n}\n\nexport class JumpToState implements Action {\n  readonly type = JUMP_TO_STATE;\n\n  constructor(public index: number) {}\n}\n\nexport class JumpToAction implements Action {\n  readonly type = JUMP_TO_ACTION;\n\n  constructor(public actionId: number) {}\n}\n\nexport class ImportState implements Action {\n  readonly type = IMPORT_STATE;\n\n  constructor(public nextLiftedState: any) {}\n}\n\nexport type All =\n  | PerformAction\n  | Refresh\n  | Reset\n  | Rollback\n  | Commit\n  | Sweep\n  | ToggleAction\n  | SetActionsActive\n  | JumpToState\n  | JumpToAction\n  | ImportState;\n","import { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport * as Actions from './actions';\nimport { ActionSanitizer, StateSanitizer } from './config';\nimport {\n  ComputedState,\n  LiftedAction,\n  LiftedActions,\n  LiftedState,\n} from './reducer';\n\nexport function difference(first: any[], second: any[]) {\n  return first.filter(item => second.indexOf(item) < 0);\n}\n\n/**\n * Provides an app's view into the state of the lifted store.\n */\nexport function unliftState(liftedState: LiftedState) {\n  const { computedStates, currentStateIndex } = liftedState;\n  const { state } = computedStates[currentStateIndex];\n\n  return state;\n}\n\nexport function unliftAction(liftedState: LiftedState): LiftedAction {\n  return liftedState.actionsById[liftedState.nextActionId - 1];\n}\n\n/**\n * Lifts an app's action into an action on the lifted store.\n */\nexport function liftAction(action: Action) {\n  return new Actions.PerformAction(action, +Date.now());\n}\n\n/**\n * Sanitizes given actions with given function.\n */\nexport function sanitizeActions(\n  actionSanitizer: ActionSanitizer,\n  actions: LiftedActions\n): LiftedActions {\n  return Object.keys(actions).reduce(\n    (sanitizedActions, actionIdx) => {\n      const idx = Number(actionIdx);\n      sanitizedActions[idx] = sanitizeAction(\n        actionSanitizer,\n        actions[idx],\n        idx\n      );\n      return sanitizedActions;\n    },\n    <LiftedActions>{}\n  );\n}\n\n/**\n * Sanitizes given action with given function.\n */\nexport function sanitizeAction(\n  actionSanitizer: ActionSanitizer,\n  action: LiftedAction,\n  actionIdx: number\n): LiftedAction {\n  return {\n    ...action,\n    action: actionSanitizer(action.action, actionIdx),\n  };\n}\n\n/**\n * Sanitizes given states with given function.\n */\nexport function sanitizeStates(\n  stateSanitizer: StateSanitizer,\n  states: ComputedState[]\n): ComputedState[] {\n  return states.map((computedState, idx) => ({\n    state: sanitizeState(stateSanitizer, computedState.state, idx),\n    error: computedState.error,\n  }));\n}\n\n/**\n * Sanitizes given state with given function.\n */\nexport function sanitizeState(\n  stateSanitizer: StateSanitizer,\n  state: any,\n  stateIdx: number\n) {\n  return stateSanitizer(state, stateIdx);\n}\n","import { Inject, Injectable, InjectionToken } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { empty, Observable } from 'rxjs';\nimport { filter, map, share, switchMap, takeUntil } from 'rxjs/operators';\n\nimport { PERFORM_ACTION } from './actions';\nimport {\n  SerializationOptions,\n  STORE_DEVTOOLS_CONFIG,\n  StoreDevtoolsConfig,\n} from './config';\nimport { LiftedAction, LiftedState } from './reducer';\nimport {\n  sanitizeAction,\n  sanitizeActions,\n  sanitizeState,\n  sanitizeStates,\n  unliftState,\n} from './utils';\n\nexport const ExtensionActionTypes = {\n  START: 'START',\n  DISPATCH: 'DISPATCH',\n  STOP: 'STOP',\n  ACTION: 'ACTION',\n};\n\nexport const REDUX_DEVTOOLS_EXTENSION = new InjectionToken<\n  ReduxDevtoolsExtension\n>('Redux Devtools Extension');\n\nexport interface ReduxDevtoolsExtensionConnection {\n  subscribe(listener: (change: any) => void): void;\n  unsubscribe(): void;\n  send(action: any, state: any): void;\n  init(state?: any): void;\n  error(anyErr: any): void;\n}\nexport interface ReduxDevtoolsExtensionConfig {\n  features?: object | boolean;\n  name: string | undefined;\n  instanceId: string;\n  maxAge?: number;\n  serialize?: boolean | SerializationOptions;\n}\n\nexport interface ReduxDevtoolsExtension {\n  connect(\n    options: ReduxDevtoolsExtensionConfig\n  ): ReduxDevtoolsExtensionConnection;\n  send(\n    action: any,\n    state: any,\n    options: ReduxDevtoolsExtensionConfig,\n    instanceId?: string\n  ): void;\n}\n\n@Injectable()\nexport class DevtoolsExtension {\n  private instanceId = `ngrx-store-${Date.now()}`;\n  private devtoolsExtension: ReduxDevtoolsExtension;\n  private extensionConnection: ReduxDevtoolsExtensionConnection;\n\n  liftedActions$: Observable<any>;\n  actions$: Observable<any>;\n  start$: Observable<any>;\n\n  constructor(\n    @Inject(REDUX_DEVTOOLS_EXTENSION) devtoolsExtension: ReduxDevtoolsExtension,\n    @Inject(STORE_DEVTOOLS_CONFIG) private config: StoreDevtoolsConfig\n  ) {\n    this.devtoolsExtension = devtoolsExtension;\n    this.createActionStreams();\n  }\n\n  notify(action: LiftedAction, state: LiftedState) {\n    if (!this.devtoolsExtension) {\n      return;\n    }\n\n    // Check to see if the action requires a full update of the liftedState.\n    // If it is a simple action generated by the user's app, only send the\n    // action and the current state (fast).\n    //\n    // A full liftedState update (slow: serializes the entire liftedState) is\n    // only required when:\n    //   a) redux-devtools-extension fires the @@Init action (ignored by\n    //      @ngrx/store-devtools)\n    //   b) an action is generated by an @ngrx module (e.g. @ngrx/effects/init\n    //      or @ngrx/store/update-reducers)\n    //   c) the state has been recomputed due to time-traveling\n    //   d) any action that is not a PerformAction to err on the side of\n    //      caution.\n    if (action.type === PERFORM_ACTION) {\n      const currentState = unliftState(state);\n      const sanitizedState = this.config.stateSanitizer\n        ? sanitizeState(\n            this.config.stateSanitizer,\n            currentState,\n            state.currentStateIndex\n          )\n        : currentState;\n      const sanitizedAction = this.config.actionSanitizer\n        ? sanitizeAction(\n            this.config.actionSanitizer,\n            action,\n            state.nextActionId\n          )\n        : action;\n      this.extensionConnection.send(sanitizedAction, sanitizedState);\n    } else {\n      // Requires full state update\n      const sanitizedLiftedState = {\n        ...state,\n        actionsById: this.config.actionSanitizer\n          ? sanitizeActions(this.config.actionSanitizer, state.actionsById)\n          : state.actionsById,\n        computedStates: this.config.stateSanitizer\n          ? sanitizeStates(this.config.stateSanitizer, state.computedStates)\n          : state.computedStates,\n      };\n      this.devtoolsExtension.send(\n        null,\n        sanitizedLiftedState,\n        this.getExtensionConfig(this.instanceId, this.config),\n        this.instanceId\n      );\n    }\n  }\n\n  private createChangesObservable(): Observable<any> {\n    if (!this.devtoolsExtension) {\n      return empty();\n    }\n\n    return new Observable(subscriber => {\n      const connection = this.devtoolsExtension.connect(\n        this.getExtensionConfig(this.instanceId, this.config)\n      );\n      this.extensionConnection = connection;\n      connection.init();\n\n      connection.subscribe((change: any) => subscriber.next(change));\n      return connection.unsubscribe;\n    });\n  }\n\n  private createActionStreams() {\n    // Listens to all changes based on our instanceId\n    const changes$ = this.createChangesObservable().pipe(share());\n\n    // Listen for the start action\n    const start$ = changes$.pipe(\n      filter((change: any) => change.type === ExtensionActionTypes.START)\n    );\n\n    // Listen for the stop action\n    const stop$ = changes$.pipe(\n      filter((change: any) => change.type === ExtensionActionTypes.STOP)\n    );\n\n    // Listen for lifted actions\n    const liftedActions$ = changes$.pipe(\n      filter(change => change.type === ExtensionActionTypes.DISPATCH),\n      map(change => this.unwrapAction(change.payload))\n    );\n\n    // Listen for unlifted actions\n    const actions$ = changes$.pipe(\n      filter(change => change.type === ExtensionActionTypes.ACTION),\n      map(change => this.unwrapAction(change.payload))\n    );\n\n    const actionsUntilStop$ = actions$.pipe(takeUntil(stop$));\n    const liftedUntilStop$ = liftedActions$.pipe(takeUntil(stop$));\n    this.start$ = start$.pipe(takeUntil(stop$));\n\n    // Only take the action sources between the start/stop events\n    this.actions$ = this.start$.pipe(switchMap(() => actionsUntilStop$));\n    this.liftedActions$ = this.start$.pipe(switchMap(() => liftedUntilStop$));\n  }\n\n  private unwrapAction(action: Action) {\n    return typeof action === 'string' ? eval(`(${action})`) : action;\n  }\n\n  private getExtensionConfig(instanceId: string, config: StoreDevtoolsConfig) {\n    const extensionOptions: ReduxDevtoolsExtensionConfig = {\n      instanceId: instanceId,\n      name: config.name,\n      features: config.features,\n      serialize: config.serialize,\n      // The action/state sanitizers are not added to the config\n      // because sanitation is done in this class already.\n      // It is done before sending it to the devtools extension for consistency:\n      // - If we call extensionConnection.send(...),\n      //   the extension would call the sanitizers.\n      // - If we call devtoolsExtension.send(...) (aka full state update),\n      //   the extension would NOT call the sanitizers, so we have to do it ourselves.\n    };\n    if (config.maxAge !== false /* support === 0 */) {\n      extensionOptions.maxAge = config.maxAge;\n    }\n    return extensionOptions;\n  }\n}\n","import { ErrorHandler } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionsSubject,\n  ReducerManager,\n  UPDATE,\n  INIT,\n} from '@ngrx/store';\nimport { difference, liftAction } from './utils';\nimport * as Actions from './actions';\nimport { StoreDevtoolsConfig, StateSanitizer } from './config';\nimport { PerformAction } from './actions';\n\nexport type InitAction = {\n  readonly type: typeof INIT;\n};\n\nexport type UpdateReducerAction = {\n  readonly type: typeof UPDATE;\n};\n\nexport type CoreActions = InitAction | UpdateReducerAction;\nexport type Actions = Actions.All | CoreActions;\n\nexport const INIT_ACTION = { type: INIT };\n\nexport interface ComputedState {\n  state: any;\n  error: any;\n}\n\nexport interface LiftedAction {\n  type: string;\n  action: Action;\n}\n\nexport interface LiftedActions {\n  [id: number]: LiftedAction;\n}\n\nexport interface LiftedState {\n  monitorState: any;\n  nextActionId: number;\n  actionsById: LiftedActions;\n  stagedActionIds: number[];\n  skippedActionIds: number[];\n  committedState: any;\n  currentStateIndex: number;\n  computedStates: ComputedState[];\n}\n\n/**\n * Computes the next entry in the log by applying an action.\n */\nfunction computeNextEntry(\n  reducer: ActionReducer<any, any>,\n  action: Action,\n  state: any,\n  error: any,\n  errorHandler: ErrorHandler\n) {\n  if (error) {\n    return {\n      state,\n      error: 'Interrupted by an error up the chain',\n    };\n  }\n\n  let nextState = state;\n  let nextError;\n  try {\n    nextState = reducer(state, action);\n  } catch (err) {\n    nextError = err.toString();\n    errorHandler.handleError(err.stack || err);\n  }\n\n  return {\n    state: nextState,\n    error: nextError,\n  };\n}\n\n/**\n * Runs the reducer on invalidated actions to get a fresh computation log.\n */\nfunction recomputeStates(\n  computedStates: ComputedState[],\n  minInvalidatedStateIndex: number,\n  reducer: ActionReducer<any, any>,\n  committedState: any,\n  actionsById: LiftedActions,\n  stagedActionIds: number[],\n  skippedActionIds: number[],\n  errorHandler: ErrorHandler\n) {\n  // Optimization: exit early and return the same reference\n  // if we know nothing could have changed.\n  if (\n    minInvalidatedStateIndex >= computedStates.length &&\n    computedStates.length === stagedActionIds.length\n  ) {\n    return computedStates;\n  }\n\n  const nextComputedStates = computedStates.slice(0, minInvalidatedStateIndex);\n  for (let i = minInvalidatedStateIndex; i < stagedActionIds.length; i++) {\n    const actionId = stagedActionIds[i];\n    const action = actionsById[actionId].action;\n\n    const previousEntry = nextComputedStates[i - 1];\n    const previousState = previousEntry ? previousEntry.state : committedState;\n    const previousError = previousEntry ? previousEntry.error : undefined;\n\n    const shouldSkip = skippedActionIds.indexOf(actionId) > -1;\n    const entry: ComputedState = shouldSkip\n      ? previousEntry\n      : computeNextEntry(\n          reducer,\n          action,\n          previousState,\n          previousError,\n          errorHandler\n        );\n\n    nextComputedStates.push(entry);\n  }\n\n  return nextComputedStates;\n}\n\nexport function liftInitialState(\n  initialCommittedState?: any,\n  monitorReducer?: any\n): LiftedState {\n  return {\n    monitorState: monitorReducer(undefined, {}),\n    nextActionId: 1,\n    actionsById: { 0: liftAction(INIT_ACTION) },\n    stagedActionIds: [0],\n    skippedActionIds: [],\n    committedState: initialCommittedState,\n    currentStateIndex: 0,\n    computedStates: [],\n  };\n}\n\n/**\n * Creates a history state reducer from an app's reducer.\n */\nexport function liftReducerWith(\n  initialCommittedState: any,\n  initialLiftedState: LiftedState,\n  errorHandler: ErrorHandler,\n  monitorReducer?: any,\n  options: Partial<StoreDevtoolsConfig> = {}\n) {\n  /**\n   * Manages how the history actions modify the history state.\n   */\n  return (\n    reducer: ActionReducer<any, any>\n  ): ActionReducer<LiftedState, Actions> => (liftedState, liftedAction) => {\n    let {\n      monitorState,\n      actionsById,\n      nextActionId,\n      stagedActionIds,\n      skippedActionIds,\n      committedState,\n      currentStateIndex,\n      computedStates,\n    } =\n      liftedState || initialLiftedState;\n\n    if (!liftedState) {\n      // Prevent mutating initialLiftedState\n      actionsById = Object.create(actionsById);\n    }\n\n    function commitExcessActions(n: number) {\n      // Auto-commits n-number of excess actions.\n      let excess = n;\n      let idsToDelete = stagedActionIds.slice(1, excess + 1);\n\n      for (let i = 0; i < idsToDelete.length; i++) {\n        if (computedStates[i + 1].error) {\n          // Stop if error is found. Commit actions up to error.\n          excess = i;\n          idsToDelete = stagedActionIds.slice(1, excess + 1);\n          break;\n        } else {\n          delete actionsById[idsToDelete[i]];\n        }\n      }\n\n      skippedActionIds = skippedActionIds.filter(\n        id => idsToDelete.indexOf(id) === -1\n      );\n      stagedActionIds = [0, ...stagedActionIds.slice(excess + 1)];\n      committedState = computedStates[excess].state;\n      computedStates = computedStates.slice(excess);\n      currentStateIndex =\n        currentStateIndex > excess ? currentStateIndex - excess : 0;\n    }\n\n    // By default, aggressively recompute every state whatever happens.\n    // This has O(n) performance, so we'll override this to a sensible\n    // value whenever we feel like we don't have to recompute the states.\n    let minInvalidatedStateIndex = 0;\n\n    switch (liftedAction.type) {\n      case Actions.RESET: {\n        // Get back to the state the store was created with.\n        actionsById = { 0: liftAction(INIT_ACTION) };\n        nextActionId = 1;\n        stagedActionIds = [0];\n        skippedActionIds = [];\n        committedState = initialCommittedState;\n        currentStateIndex = 0;\n        computedStates = [];\n        break;\n      }\n      case Actions.COMMIT: {\n        // Consider the last committed state the new starting point.\n        // Squash any staged actions into a single committed state.\n        actionsById = { 0: liftAction(INIT_ACTION) };\n        nextActionId = 1;\n        stagedActionIds = [0];\n        skippedActionIds = [];\n        committedState = computedStates[currentStateIndex].state;\n        currentStateIndex = 0;\n        computedStates = [];\n        break;\n      }\n      case Actions.ROLLBACK: {\n        // Forget about any staged actions.\n        // Start again from the last committed state.\n        actionsById = { 0: liftAction(INIT_ACTION) };\n        nextActionId = 1;\n        stagedActionIds = [0];\n        skippedActionIds = [];\n        currentStateIndex = 0;\n        computedStates = [];\n        break;\n      }\n      case Actions.TOGGLE_ACTION: {\n        // Toggle whether an action with given ID is skipped.\n        // Being skipped means it is a no-op during the computation.\n        const { id: actionId } = liftedAction;\n        const index = skippedActionIds.indexOf(actionId);\n        if (index === -1) {\n          skippedActionIds = [actionId, ...skippedActionIds];\n        } else {\n          skippedActionIds = skippedActionIds.filter(id => id !== actionId);\n        }\n        // Optimization: we know history before this action hasn't changed\n        minInvalidatedStateIndex = stagedActionIds.indexOf(actionId);\n        break;\n      }\n      case Actions.SET_ACTIONS_ACTIVE: {\n        // Toggle whether an action with given ID is skipped.\n        // Being skipped means it is a no-op during the computation.\n        const { start, end, active } = liftedAction;\n        const actionIds = [];\n        for (let i = start; i < end; i++) actionIds.push(i);\n        if (active) {\n          skippedActionIds = difference(skippedActionIds, actionIds);\n        } else {\n          skippedActionIds = [...skippedActionIds, ...actionIds];\n        }\n\n        // Optimization: we know history before this action hasn't changed\n        minInvalidatedStateIndex = stagedActionIds.indexOf(start);\n        break;\n      }\n      case Actions.JUMP_TO_STATE: {\n        // Without recomputing anything, move the pointer that tell us\n        // which state is considered the current one. Useful for sliders.\n        currentStateIndex = liftedAction.index;\n        // Optimization: we know the history has not changed.\n        minInvalidatedStateIndex = Infinity;\n        break;\n      }\n      case Actions.JUMP_TO_ACTION: {\n        // Jumps to a corresponding state to a specific action.\n        // Useful when filtering actions.\n        const index = stagedActionIds.indexOf(liftedAction.actionId);\n        if (index !== -1) currentStateIndex = index;\n        minInvalidatedStateIndex = Infinity;\n        break;\n      }\n      case Actions.SWEEP: {\n        // Forget any actions that are currently being skipped.\n        stagedActionIds = difference(stagedActionIds, skippedActionIds);\n        skippedActionIds = [];\n        currentStateIndex = Math.min(\n          currentStateIndex,\n          stagedActionIds.length - 1\n        );\n        break;\n      }\n      case Actions.PERFORM_ACTION: {\n        // Auto-commit as new actions come in.\n        if (options.maxAge && stagedActionIds.length === options.maxAge) {\n          commitExcessActions(1);\n        }\n\n        if (currentStateIndex === stagedActionIds.length - 1) {\n          currentStateIndex++;\n        }\n        const actionId = nextActionId++;\n        // Mutation! This is the hottest path, and we optimize on purpose.\n        // It is safe because we set a new key in a cache dictionary.\n        actionsById[actionId] = liftedAction;\n\n        stagedActionIds = [...stagedActionIds, actionId];\n        // Optimization: we know that only the new action needs computing.\n        minInvalidatedStateIndex = stagedActionIds.length - 1;\n        break;\n      }\n      case Actions.IMPORT_STATE: {\n        // Completely replace everything.\n        ({\n          monitorState,\n          actionsById,\n          nextActionId,\n          stagedActionIds,\n          skippedActionIds,\n          committedState,\n          currentStateIndex,\n          // prettier-ignore\n          computedStates\n        } = liftedAction.nextLiftedState);\n        break;\n      }\n      case INIT: {\n        // Always recompute states on hot reload and init.\n        minInvalidatedStateIndex = 0;\n\n        if (options.maxAge && stagedActionIds.length > options.maxAge) {\n          // States must be recomputed before committing excess.\n          computedStates = recomputeStates(\n            computedStates,\n            minInvalidatedStateIndex,\n            reducer,\n            committedState,\n            actionsById,\n            stagedActionIds,\n            skippedActionIds,\n            errorHandler\n          );\n\n          commitExcessActions(stagedActionIds.length - options.maxAge);\n\n          // Avoid double computation.\n          minInvalidatedStateIndex = Infinity;\n        }\n\n        break;\n      }\n      case UPDATE: {\n        const stateHasErrors =\n          computedStates.filter(state => state.error).length > 0;\n\n        if (stateHasErrors) {\n          // Recompute all states\n          minInvalidatedStateIndex = 0;\n\n          if (options.maxAge && stagedActionIds.length > options.maxAge) {\n            // States must be recomputed before committing excess.\n            computedStates = recomputeStates(\n              computedStates,\n              minInvalidatedStateIndex,\n              reducer,\n              committedState,\n              actionsById,\n              stagedActionIds,\n              skippedActionIds,\n              errorHandler\n            );\n\n            commitExcessActions(stagedActionIds.length - options.maxAge);\n\n            // Avoid double computation.\n            minInvalidatedStateIndex = Infinity;\n          }\n        } else {\n          if (currentStateIndex === stagedActionIds.length - 1) {\n            currentStateIndex++;\n          }\n\n          // Add a new action to only recompute state\n          const actionId = nextActionId++;\n          actionsById[actionId] = new PerformAction(liftedAction, +Date.now());\n          stagedActionIds = [...stagedActionIds, actionId];\n\n          minInvalidatedStateIndex = stagedActionIds.length - 1;\n\n          // States must be recomputed before committing excess.\n          computedStates = recomputeStates(\n            computedStates,\n            minInvalidatedStateIndex,\n            reducer,\n            committedState,\n            actionsById,\n            stagedActionIds,\n            skippedActionIds,\n            errorHandler\n          );\n\n          // Recompute state history with latest reducer and update action\n          computedStates = computedStates.map(cmp => ({\n            ...cmp,\n            state: reducer(cmp.state, liftedAction),\n          }));\n\n          currentStateIndex = minInvalidatedStateIndex;\n\n          if (options.maxAge && stagedActionIds.length > options.maxAge) {\n            commitExcessActions(stagedActionIds.length - options.maxAge);\n          }\n\n          // Avoid double computation.\n          minInvalidatedStateIndex = Infinity;\n        }\n\n        break;\n      }\n      default: {\n        // If the action is not recognized, it's a monitor action.\n        // Optimization: a monitor action can't change history.\n        minInvalidatedStateIndex = Infinity;\n        break;\n      }\n    }\n\n    computedStates = recomputeStates(\n      computedStates,\n      minInvalidatedStateIndex,\n      reducer,\n      committedState,\n      actionsById,\n      stagedActionIds,\n      skippedActionIds,\n      errorHandler\n    );\n    monitorState = monitorReducer(monitorState, liftedAction);\n\n    return {\n      monitorState,\n      actionsById,\n      nextActionId,\n      stagedActionIds,\n      skippedActionIds,\n      committedState,\n      currentStateIndex,\n      computedStates,\n    };\n  };\n}\n","import { Injectable, Inject, OnDestroy, ErrorHandler } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionsSubject,\n  INITIAL_STATE,\n  ReducerObservable,\n  ScannedActionsSubject,\n} from '@ngrx/store';\nimport {\n  merge,\n  Observable,\n  Observer,\n  queueScheduler,\n  ReplaySubject,\n  Subscription,\n} from 'rxjs';\nimport { map, observeOn, scan, skip, withLatestFrom } from 'rxjs/operators';\n\nimport * as Actions from './actions';\nimport { STORE_DEVTOOLS_CONFIG, StoreDevtoolsConfig } from './config';\nimport { DevtoolsExtension } from './extension';\nimport { LiftedState, liftInitialState, liftReducerWith } from './reducer';\nimport { liftAction, unliftState } from './utils';\n\n@Injectable()\nexport class DevtoolsDispatcher extends ActionsSubject {}\n\n@Injectable()\nexport class StoreDevtools implements Observer<any> {\n  private stateSubscription: Subscription;\n  private extensionStartSubscription: Subscription;\n  public dispatcher: ActionsSubject;\n  public liftedState: Observable<LiftedState>;\n  public state: Observable<any>;\n\n  constructor(\n    dispatcher: DevtoolsDispatcher,\n    actions$: ActionsSubject,\n    reducers$: ReducerObservable,\n    extension: DevtoolsExtension,\n    scannedActions: ScannedActionsSubject,\n    errorHandler: ErrorHandler,\n    @Inject(INITIAL_STATE) initialState: any,\n    @Inject(STORE_DEVTOOLS_CONFIG) config: StoreDevtoolsConfig\n  ) {\n    const liftedInitialState = liftInitialState(initialState, config.monitor);\n    const liftReducer = liftReducerWith(\n      initialState,\n      liftedInitialState,\n      errorHandler,\n      config.monitor,\n      config\n    );\n\n    const liftedAction$ = merge(\n      merge(actions$.asObservable().pipe(skip(1)), extension.actions$).pipe(\n        map(liftAction)\n      ),\n      dispatcher,\n      extension.liftedActions$\n    ).pipe(observeOn(queueScheduler));\n\n    const liftedReducer$ = reducers$.pipe(map(liftReducer));\n\n    const liftedStateSubject = new ReplaySubject<LiftedState>(1);\n\n    const liftedStateSubscription = liftedAction$\n      .pipe(\n        withLatestFrom(liftedReducer$),\n        scan<\n          [any, ActionReducer<LiftedState, Actions.All>],\n          {\n            state: LiftedState;\n            action: any;\n          }\n        >(\n          ({ state: liftedState }, [action, reducer]) => {\n            const reducedLiftedState = reducer(liftedState, action);\n\n            // // Extension should be sent the sanitized lifted state\n            extension.notify(action, reducedLiftedState);\n\n            return { state: reducedLiftedState, action };\n          },\n          { state: liftedInitialState, action: null as any }\n        )\n      )\n      .subscribe(({ state, action }) => {\n        liftedStateSubject.next(state);\n\n        if (action.type === Actions.PERFORM_ACTION) {\n          const unliftedAction = (action as Actions.PerformAction).action;\n\n          scannedActions.next(unliftedAction);\n        }\n      });\n\n    const extensionStartSubscription = extension.start$.subscribe(() => {\n      this.refresh();\n    });\n\n    const liftedState$ = liftedStateSubject.asObservable() as Observable<\n      LiftedState\n    >;\n    const state$ = liftedState$.pipe(map(unliftState));\n\n    this.extensionStartSubscription = extensionStartSubscription;\n    this.stateSubscription = liftedStateSubscription;\n    this.dispatcher = dispatcher;\n    this.liftedState = liftedState$;\n    this.state = state$;\n  }\n\n  dispatch(action: Action) {\n    this.dispatcher.next(action);\n  }\n\n  next(action: any) {\n    this.dispatcher.next(action);\n  }\n\n  error(error: any) {}\n\n  complete() {}\n\n  performAction(action: any) {\n    this.dispatch(new Actions.PerformAction(action, +Date.now()));\n  }\n\n  refresh() {\n    this.dispatch(new Actions.Refresh());\n  }\n\n  reset() {\n    this.dispatch(new Actions.Reset(+Date.now()));\n  }\n\n  rollback() {\n    this.dispatch(new Actions.Rollback(+Date.now()));\n  }\n\n  commit() {\n    this.dispatch(new Actions.Commit(+Date.now()));\n  }\n\n  sweep() {\n    this.dispatch(new Actions.Sweep());\n  }\n\n  toggleAction(id: number) {\n    this.dispatch(new Actions.ToggleAction(id));\n  }\n\n  jumpToAction(actionId: number) {\n    this.dispatch(new Actions.JumpToAction(actionId));\n  }\n\n  jumpToState(index: number) {\n    this.dispatch(new Actions.JumpToState(index));\n  }\n\n  importState(nextLiftedState: any) {\n    this.dispatch(new Actions.ImportState(nextLiftedState));\n  }\n}\n","import { InjectionToken, ModuleWithProviders, NgModule } from '@angular/core';\nimport { ReducerManagerDispatcher, StateObservable } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport {\n  INITIAL_OPTIONS,\n  STORE_DEVTOOLS_CONFIG,\n  StoreDevtoolsConfig,\n  StoreDevtoolsOptions,\n} from './config';\nimport { DevtoolsDispatcher, StoreDevtools } from './devtools';\nimport {\n  DevtoolsExtension,\n  REDUX_DEVTOOLS_EXTENSION,\n  ReduxDevtoolsExtension,\n} from './extension';\n\nexport const IS_EXTENSION_OR_MONITOR_PRESENT = new InjectionToken<boolean>(\n  'Is Devtools Extension or Monitor Present'\n);\n\nexport function createIsExtensionOrMonitorPresent(\n  extension: ReduxDevtoolsExtension | null,\n  config: StoreDevtoolsConfig\n) {\n  return Boolean(extension) || config.monitor !== noMonitor;\n}\n\nexport function createReduxDevtoolsExtension() {\n  const extensionKey = '__REDUX_DEVTOOLS_EXTENSION__';\n\n  if (\n    typeof window === 'object' &&\n    typeof (window as any)[extensionKey] !== 'undefined'\n  ) {\n    return (window as any)[extensionKey];\n  } else {\n    return null;\n  }\n}\n\nexport function createStateObservable(\n  devtools: StoreDevtools\n): Observable<any> {\n  return devtools.state;\n}\n\nexport function noMonitor(): null {\n  return null;\n}\n\nexport const DEFAULT_NAME = 'NgRx Store DevTools';\n\nexport function createConfig(\n  _options: StoreDevtoolsOptions\n): StoreDevtoolsConfig {\n  const DEFAULT_OPTIONS: StoreDevtoolsConfig = {\n    maxAge: false,\n    monitor: noMonitor,\n    actionSanitizer: undefined,\n    stateSanitizer: undefined,\n    name: DEFAULT_NAME,\n    serialize: false,\n    logOnly: false,\n    features: false,\n  };\n\n  let options = typeof _options === 'function' ? _options() : _options;\n  const logOnly = options.logOnly\n    ? { pause: true, export: true, test: true }\n    : false;\n  const features = options.features || logOnly;\n  const config = Object.assign({}, DEFAULT_OPTIONS, { features }, options);\n\n  if (config.maxAge && config.maxAge < 2) {\n    throw new Error(\n      `Devtools 'maxAge' cannot be less than 2, got ${config.maxAge}`\n    );\n  }\n\n  return config;\n}\n\n@NgModule({})\nexport class StoreDevtoolsModule {\n  static instrument(options: StoreDevtoolsOptions = {}): ModuleWithProviders {\n    return {\n      ngModule: StoreDevtoolsModule,\n      providers: [\n        DevtoolsExtension,\n        DevtoolsDispatcher,\n        StoreDevtools,\n        {\n          provide: INITIAL_OPTIONS,\n          useValue: options,\n        },\n        {\n          provide: IS_EXTENSION_OR_MONITOR_PRESENT,\n          deps: [REDUX_DEVTOOLS_EXTENSION, STORE_DEVTOOLS_CONFIG],\n          useFactory: createIsExtensionOrMonitorPresent,\n        },\n        {\n          provide: REDUX_DEVTOOLS_EXTENSION,\n          useFactory: createReduxDevtoolsExtension,\n        },\n        {\n          provide: STORE_DEVTOOLS_CONFIG,\n          deps: [INITIAL_OPTIONS],\n          useFactory: createConfig,\n        },\n        {\n          provide: StateObservable,\n          deps: [StoreDevtools],\n          useFactory: createStateObservable,\n        },\n        {\n          provide: ReducerManagerDispatcher,\n          useExisting: DevtoolsDispatcher,\n        },\n      ],\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {INITIAL_OPTIONS as Éµngrx_modules_store_devtools_store_devtools_i,STORE_DEVTOOLS_CONFIG as Éµngrx_modules_store_devtools_store_devtools_h} from './src/config';\nexport {DevtoolsDispatcher as Éµngrx_modules_store_devtools_store_devtools_g} from './src/devtools';\nexport {DevtoolsExtension as Éµngrx_modules_store_devtools_store_devtools_k,REDUX_DEVTOOLS_EXTENSION as Éµngrx_modules_store_devtools_store_devtools_j} from './src/extension';\nexport {IS_EXTENSION_OR_MONITOR_PRESENT as Éµngrx_modules_store_devtools_store_devtools_a,createConfig as Éµngrx_modules_store_devtools_store_devtools_f,createIsExtensionOrMonitorPresent as Éµngrx_modules_store_devtools_store_devtools_b,createReduxDevtoolsExtension as Éµngrx_modules_store_devtools_store_devtools_c,createStateObservable as Éµngrx_modules_store_devtools_store_devtools_d,noMonitor as Éµngrx_modules_store_devtools_store_devtools_e} from './src/instrument';"],"names":["Actions.PerformAction","Actions.RESET","Actions.COMMIT","Actions.ROLLBACK","Actions.TOGGLE_ACTION","Actions.SET_ACTIONS_ACTIVE","Actions.JUMP_TO_STATE","Actions.JUMP_TO_ACTION","Actions.SWEEP","Actions.PERFORM_ACTION","Actions.IMPORT_STATE","Actions.Refresh","Actions.Reset","Actions.Rollback","Actions.Commit","Actions.Sweep","Actions.ToggleAction","Actions.JumpToAction","Actions.JumpToState","Actions.ImportState"],"mappings":";;;;;;;;;;IAaA;;;8BAbA;IAsBC,CAAA;AATD,IAWa,qBAAqB,GAAG,IAAI,cAAc,CACrD,wBAAwB,CACzB,CAAC;AACF,IAAa,eAAe,GAAG,IAAI,cAAc,CAC/C,+BAA+B,CAChC;;AC3BM,IAAM,cAAc,GAAG,gBAAgB,CAAC;AAC/C,AAAO,IAAM,OAAO,GAAG,SAAS,CAAC;AACjC,AAAO,IAAM,KAAK,GAAG,OAAO,CAAC;AAC7B,AAAO,IAAM,QAAQ,GAAG,UAAU,CAAC;AACnC,AAAO,IAAM,MAAM,GAAG,QAAQ,CAAC;AAC/B,AAAO,IAAM,KAAK,GAAG,OAAO,CAAC;AAC7B,AAAO,IAAM,aAAa,GAAG,eAAe,CAAC;AAC7C,AAAO,IAAM,kBAAkB,GAAG,oBAAoB,CAAC;AACvD,AAAO,IAAM,aAAa,GAAG,eAAe,CAAC;AAC7C,AAAO,IAAM,cAAc,GAAG,gBAAgB,CAAC;AAC/C,AAAO,IAAM,YAAY,GAAG,cAAc,CAAC;AAE3C,IAAA;IAGE,uBAAmB,MAAc,EAAS,SAAiB;QAAxC,WAAM,GAAN,MAAM,CAAQ;QAAS,cAAS,GAAT,SAAS,CAAQ;oBAF3C,cAAc;QAG5B,IAAI,OAAO,MAAM,CAAC,IAAI,KAAK,WAAW,EAAE;YACtC,MAAM,IAAI,KAAK,CACb,qDAAqD;gBACnD,iCAAiC,CACpC,CAAC;SACH;KACF;wBAxBH;IAyBC,CAAA;AAXD,AAaA,IAAA;;oBACkB,OAAO;;kBA5BzB;IA6BC,CAAA;AAFD,AAIA,IAAA;IAGE,eAAmB,SAAiB;QAAjB,cAAS,GAAT,SAAS,CAAQ;oBAFpB,KAAK;KAEmB;gBAlC1C;IAmCC,CAAA;AAJD,AAMA,IAAA;IAGE,kBAAmB,SAAiB;QAAjB,cAAS,GAAT,SAAS,CAAQ;oBAFpB,QAAQ;KAEgB;mBAxC1C;IAyCC,CAAA;AAJD,AAMA,IAAA;IAGE,gBAAmB,SAAiB;QAAjB,cAAS,GAAT,SAAS,CAAQ;oBAFpB,MAAM;KAEkB;iBA9C1C;IA+CC,CAAA;AAJD,AAMA,IAAA;;oBACkB,KAAK;;gBAlDvB;IAmDC,CAAA;AAFD,AAIA,IAAA;IAGE,sBAAmB,EAAU;QAAV,OAAE,GAAF,EAAE,CAAQ;oBAFb,aAAa;KAEI;uBAxDnC;IAyDC,CAAA;AAJD,AAgBA,IAAA;IAGE,qBAAmB,KAAa;QAAb,UAAK,GAAL,KAAK,CAAQ;oBAFhB,aAAa;KAEO;sBAxEtC;IAyEC,CAAA;AAJD,AAMA,IAAA;IAGE,sBAAmB,QAAgB;QAAhB,aAAQ,GAAR,QAAQ,CAAQ;oBAFnB,cAAc;KAES;uBA9EzC;IA+EC,CAAA;AAJD,AAMA,IAAA;IAGE,qBAAmB,eAAoB;QAApB,oBAAe,GAAf,eAAe,CAAK;oBAFvB,YAAY;KAEe;sBApF7C;IAqFC,CAAA;;;;;;;;;;AClFD,oBAS2B,KAAY,EAAE,MAAa;IACpD,OAAO,KAAK,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,GAAA,CAAC,CAAC;CACvD;;;;AAKD,qBAA4B,WAAwB;IAC1C,IAAA,2CAAc,EAAE,iDAAiB,CAAiB;IAClD,IAAA,+CAAK,CAAuC;IAEpD,OAAO,KAAK,CAAC;CACd;AAED;;;AAOA,oBAA2B,MAAc;IACvC,OAAO,IAAIA,aAAqB,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;CACvD;;;;AAKD,yBACE,eAAgC,EAChC,OAAsB;IAEtB,OAAO,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAChC,UAAC,gBAAgB,EAAE,SAAS;QAC1B,IAAM,GAAG,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;QAC9B,gBAAgB,CAAC,GAAG,CAAC,GAAG,cAAc,CACpC,eAAe,EACf,OAAO,CAAC,GAAG,CAAC,EACZ,GAAG,CACJ,CAAC;QACF,OAAO,gBAAgB,CAAC;KACzB,EACc,EAAE,CAClB,CAAC;CACH;;;;AAKD,wBACE,eAAgC,EAChC,MAAoB,EACpB,SAAiB;IAEjB,oBACK,MAAM,IACT,MAAM,EAAE,eAAe,CAAC,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,IACjD;CACH;;;;AAKD,wBACE,cAA8B,EAC9B,MAAuB;IAEvB,OAAO,MAAM,CAAC,GAAG,CAAC,UAAC,aAAa,EAAE,GAAG;QAAK,QAAC;YACzC,KAAK,EAAE,aAAa,CAAC,cAAc,EAAE,aAAa,CAAC,KAAK,EAAE,GAAG,CAAC;YAC9D,KAAK,EAAE,aAAa,CAAC,KAAK;SAC3B;KAAC,CAAC,CAAC;CACL;;;;AAKD,uBACE,cAA8B,EAC9B,KAAU,EACV,QAAgB;IAEhB,OAAO,cAAc,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;CACxC;;;;;;;;;;AC9FD,AAoBO,IAAM,oBAAoB,GAAG;IAClC,KAAK,EAAE,OAAO;IACd,QAAQ,EAAE,UAAU;IACpB,IAAI,EAAE,MAAM;IACZ,MAAM,EAAE,QAAQ;CACjB,CAAC;AAEF,IAAa,wBAAwB,GAAG,IAAI,cAAc,CAExD,0BAA0B,CAAC,CAAC;;IAuC5B,2BACoC,mBACK;QAAA,WAAM,GAAN,MAAM;0BAV1B,gBAAc,IAAI,CAAC,GAAG,EAAI;QAY7C,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,mBAAmB,EAAE,CAAC;KAC5B;IAED,kCAAM,GAAN,UAAO,MAAoB,EAAE,KAAkB;QAC7C,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;YAC3B,OAAO;SACR;;;;;;;;;;;;;;QAeD,IAAI,MAAM,CAAC,IAAI,KAAK,cAAc,EAAE;YAClC,IAAM,YAAY,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;YACxC,IAAM,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc;kBAC7C,aAAa,CACX,IAAI,CAAC,MAAM,CAAC,cAAc,EAC1B,YAAY,EACZ,KAAK,CAAC,iBAAiB,CACxB;kBACD,YAAY,CAAC;YACjB,IAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe;kBAC/C,cAAc,CACZ,IAAI,CAAC,MAAM,CAAC,eAAe,EAC3B,MAAM,EACN,KAAK,CAAC,YAAY,CACnB;kBACD,MAAM,CAAC;YACX,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,eAAe,EAAE,cAAc,CAAC,CAAC;SAChE;aAAM;;YAEL,IAAM,oBAAoB,kBACrB,KAAK,IACR,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,eAAe;sBACpC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE,KAAK,CAAC,WAAW,CAAC;sBAC/D,KAAK,CAAC,WAAW,EACrB,cAAc,EAAE,IAAI,CAAC,MAAM,CAAC,cAAc;sBACtC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,KAAK,CAAC,cAAc,CAAC;sBAChE,KAAK,CAAC,cAAc,GACzB,CAAC;YACF,IAAI,CAAC,iBAAiB,CAAC,IAAI,CACzB,IAAI,EACJ,oBAAoB,EACpB,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,EACrD,IAAI,CAAC,UAAU,CAChB,CAAC;SACH;KACF;IAEO,mDAAuB,GAA/B;QAAA,iBAeC;QAdC,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;YAC3B,OAAO,KAAK,EAAE,CAAC;SAChB;QAED,OAAO,IAAI,UAAU,CAAC,UAAA,UAAU;YAC9B,IAAM,UAAU,GAAG,KAAI,CAAC,iBAAiB,CAAC,OAAO,CAC/C,KAAI,CAAC,kBAAkB,CAAC,KAAI,CAAC,UAAU,EAAE,KAAI,CAAC,MAAM,CAAC,CACtD,CAAC;YACF,KAAI,CAAC,mBAAmB,GAAG,UAAU,CAAC;YACtC,UAAU,CAAC,IAAI,EAAE,CAAC;YAElB,UAAU,CAAC,SAAS,CAAC,UAAC,MAAW,IAAK,OAAA,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,GAAA,CAAC,CAAC;YAC/D,OAAO,UAAU,CAAC,WAAW,CAAC;SAC/B,CAAC,CAAC;KACJ;IAEO,+CAAmB,GAA3B;QAAA,iBAiCC;;QA/BC,IAAM,QAAQ,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;;QAG9D,IAAM,MAAM,GAAG,QAAQ,CAAC,IAAI,CAC1B,MAAM,CAAC,UAAC,MAAW,IAAK,OAAA,MAAM,CAAC,IAAI,KAAK,oBAAoB,CAAC,KAAK,GAAA,CAAC,CACpE,CAAC;;QAGF,IAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,CACzB,MAAM,CAAC,UAAC,MAAW,IAAK,OAAA,MAAM,CAAC,IAAI,KAAK,oBAAoB,CAAC,IAAI,GAAA,CAAC,CACnE,CAAC;;QAGF,IAAM,cAAc,GAAG,QAAQ,CAAC,IAAI,CAClC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,oBAAoB,CAAC,QAAQ,GAAA,CAAC,EAC/D,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,GAAA,CAAC,CACjD,CAAC;;QAGF,IAAM,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAC5B,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,oBAAoB,CAAC,MAAM,GAAA,CAAC,EAC7D,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,GAAA,CAAC,CACjD,CAAC;QAEF,IAAM,iBAAiB,GAAG,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;QAC1D,IAAM,gBAAgB,GAAG,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;QAC/D,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;;QAG5C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,cAAM,OAAA,iBAAiB,GAAA,CAAC,CAAC,CAAC;QACrE,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,cAAM,OAAA,gBAAgB,GAAA,CAAC,CAAC,CAAC;KAC3E;IAEO,wCAAY,GAApB,UAAqB,MAAc;QACjC,OAAO,OAAO,MAAM,KAAK,QAAQ,GAAG,IAAI,CAAC,MAAI,MAAM,MAAG,CAAC,GAAG,MAAM,CAAC;KAClE;IAEO,8CAAkB,GAA1B,UAA2B,UAAkB,EAAE,MAA2B;QACxE,IAAM,gBAAgB,GAAiC;YACrD,UAAU,EAAE,UAAU;YACtB,IAAI,EAAE,MAAM,CAAC,IAAI;YACjB,QAAQ,EAAE,MAAM,CAAC,QAAQ;YACzB,SAAS,EAAE,MAAM,CAAC,SAAS;SAQ5B,CAAC;QACF,IAAI,MAAM,CAAC,MAAM,KAAK,KAAK,sBAAsB;YAC/C,gBAAgB,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;SACzC;QACD,OAAO,gBAAgB,CAAC;KACzB;;gBAnJF,UAAU;;;;gDAWN,MAAM,SAAC,wBAAwB;gBA5DlC,mBAAmB,uBA6DhB,MAAM,SAAC,qBAAqB;;4BAtEjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCA,AAwBO,IAAM,WAAW,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;AA8B1C,0BACE,OAAgC,EAChC,MAAc,EACd,KAAU,EACV,KAAU,EACV,YAA0B;IAE1B,IAAI,KAAK,EAAE;QACT,OAAO;YACL,KAAK,OAAA;YACL,KAAK,EAAE,sCAAsC;SAC9C,CAAC;KACH;IAED,IAAI,SAAS,GAAG,KAAK,CAAC;IACtB,IAAI,SAAS,CAAC;IACd,IAAI;QACF,SAAS,GAAG,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;KACpC;IAAC,OAAO,GAAG,EAAE;QACZ,SAAS,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;QAC3B,YAAY,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,CAAC;KAC5C;IAED,OAAO;QACL,KAAK,EAAE,SAAS;QAChB,KAAK,EAAE,SAAS;KACjB,CAAC;CACH;;;;AAKD,yBACE,cAA+B,EAC/B,wBAAgC,EAChC,OAAgC,EAChC,cAAmB,EACnB,WAA0B,EAC1B,eAAyB,EACzB,gBAA0B,EAC1B,YAA0B;;;IAI1B,IACE,wBAAwB,IAAI,cAAc,CAAC,MAAM;QACjD,cAAc,CAAC,MAAM,KAAK,eAAe,CAAC,MAC5C,EAAE;QACA,OAAO,cAAc,CAAC;KACvB;IAED,IAAM,kBAAkB,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC,EAAE,wBAAwB,CAAC,CAAC;IAC7E,KAAK,IAAI,CAAC,GAAG,wBAAwB,EAAE,CAAC,GAAG,eAAe,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACtE,IAAM,QAAQ,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC;QACpC,IAAM,MAAM,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;QAE5C,IAAM,aAAa,GAAG,kBAAkB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAChD,IAAM,aAAa,GAAG,aAAa,GAAG,aAAa,CAAC,KAAK,GAAG,cAAc,CAAC;QAC3E,IAAM,aAAa,GAAG,aAAa,GAAG,aAAa,CAAC,KAAK,GAAG,SAAS,CAAC;QAEtE,IAAM,UAAU,GAAG,gBAAgB,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;QAC3D,IAAM,KAAK,GAAkB,UAAU;cACnC,aAAa;cACb,gBAAgB,CACd,OAAO,EACP,MAAM,EACN,aAAa,EACb,aAAa,EACb,YAAY,CACb,CAAC;QAEN,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAChC;IAED,OAAO,kBAAkB,CAAC;CAC3B;AAED,0BACE,qBAA2B,EAC3B,cAAoB;IAEpB,OAAO;QACL,YAAY,EAAE,cAAc,CAAC,SAAS,EAAE,EAAE,CAAC;QAC3C,YAAY,EAAE,CAAC;QACf,WAAW,EAAE,EAAE,CAAC,EAAE,UAAU,CAAC,WAAW,CAAC,EAAE;QAC3C,eAAe,EAAE,CAAC,CAAC,CAAC;QACpB,gBAAgB,EAAE,EAAE;QACpB,cAAc,EAAE,qBAAqB;QACrC,iBAAiB,EAAE,CAAC;QACpB,cAAc,EAAE,EAAE;KACnB,CAAC;CACH;;;;AAKD,yBACE,qBAA0B,EAC1B,kBAA+B,EAC/B,YAA0B,EAC1B,cAAoB,EACpB,OAA0C;IAA1C,wBAAA,EAAA,YAA0C;;;;IAK1C,OAAO,UACL,OAAgC;QACQ,OAAA,UAAC,WAAW,EAAE,YAAY;YAClE,4CACE,8BAAY,EACZ,4BAAW,EACX,8BAAY,EACZ,oCAAe,EACf,sCAAgB,EAChB,kCAAc,EACd,wCAAiB,EACjB,kCAAc,CAEoB;YAEpC,IAAI,CAAC,WAAW,EAAE;;gBAEhB,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;aAC1C;YAED,6BAA6B,CAAS;;gBAEpC,IAAI,MAAM,GAAG,CAAC,CAAC;gBACf,IAAI,WAAW,GAAG,eAAe,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,GAAG,CAAC,CAAC,CAAC;gBAEvD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBAC3C,IAAI,cAAc,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE;;wBAE/B,MAAM,GAAG,CAAC,CAAC;wBACX,WAAW,GAAG,eAAe,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,GAAG,CAAC,CAAC,CAAC;wBACnD,MAAM;qBACP;yBAAM;wBACL,OAAO,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;qBACpC;iBACF;gBAED,gBAAgB,GAAG,gBAAgB,CAAC,MAAM,CACxC,UAAA,EAAE,IAAI,OAAA,WAAW,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,GAAA,CACrC,CAAC;gBACF,eAAe,aAAI,CAAC,GAAK,eAAe,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC5D,cAAc,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;gBAC9C,cAAc,GAAG,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAC9C,iBAAiB;oBACf,iBAAiB,GAAG,MAAM,GAAG,iBAAiB,GAAG,MAAM,GAAG,CAAC,CAAC;aAC/D;;;;YAKD,IAAI,wBAAwB,GAAG,CAAC,CAAC;YAEjC,QAAQ,YAAY,CAAC,IAAI;gBACvB,KAAKC,KAAa,EAAE;;oBAElB,WAAW,GAAG,EAAE,CAAC,EAAE,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC;oBAC7C,YAAY,GAAG,CAAC,CAAC;oBACjB,eAAe,GAAG,CAAC,CAAC,CAAC,CAAC;oBACtB,gBAAgB,GAAG,EAAE,CAAC;oBACtB,cAAc,GAAG,qBAAqB,CAAC;oBACvC,iBAAiB,GAAG,CAAC,CAAC;oBACtB,cAAc,GAAG,EAAE,CAAC;oBACpB,MAAM;iBACP;gBACD,KAAKC,MAAc,EAAE;;;oBAGnB,WAAW,GAAG,EAAE,CAAC,EAAE,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC;oBAC7C,YAAY,GAAG,CAAC,CAAC;oBACjB,eAAe,GAAG,CAAC,CAAC,CAAC,CAAC;oBACtB,gBAAgB,GAAG,EAAE,CAAC;oBACtB,cAAc,GAAG,cAAc,CAAC,iBAAiB,CAAC,CAAC,KAAK,CAAC;oBACzD,iBAAiB,GAAG,CAAC,CAAC;oBACtB,cAAc,GAAG,EAAE,CAAC;oBACpB,MAAM;iBACP;gBACD,KAAKC,QAAgB,EAAE;;;oBAGrB,WAAW,GAAG,EAAE,CAAC,EAAE,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC;oBAC7C,YAAY,GAAG,CAAC,CAAC;oBACjB,eAAe,GAAG,CAAC,CAAC,CAAC,CAAC;oBACtB,gBAAgB,GAAG,EAAE,CAAC;oBACtB,iBAAiB,GAAG,CAAC,CAAC;oBACtB,cAAc,GAAG,EAAE,CAAC;oBACpB,MAAM;iBACP;gBACD,KAAKC,aAAqB,EAAE;;;oBAGlB,IAAA,4BAAY,CAAkB;oBACtC,IAAM,KAAK,GAAG,gBAAgB,CAAC,OAAO,CAAC,UAAQ,CAAC,CAAC;oBACjD,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;wBAChB,gBAAgB,aAAI,UAAQ,GAAK,gBAAgB,CAAC,CAAC;qBACpD;yBAAM;wBACL,gBAAgB,GAAG,gBAAgB,CAAC,MAAM,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,KAAK,UAAQ,GAAA,CAAC,CAAC;qBACnE;;oBAED,wBAAwB,GAAG,eAAe,CAAC,OAAO,CAAC,UAAQ,CAAC,CAAC;oBAC7D,MAAM;iBACP;gBACD,KAAKC,kBAA0B,EAAE;;;oBAGvB,IAAA,0BAAK,EAAE,sBAAG,EAAE,4BAAM,CAAkB;oBAC5C,IAAM,SAAS,GAAG,EAAE,CAAC;oBACrB,KAAK,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE;wBAAE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBACpD,IAAI,MAAM,EAAE;wBACV,gBAAgB,GAAG,UAAU,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAC;qBAC5D;yBAAM;wBACL,gBAAgB,YAAO,gBAAgB,EAAK,SAAS,CAAC,CAAC;qBACxD;;oBAGD,wBAAwB,GAAG,eAAe,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;oBAC1D,MAAM;iBACP;gBACD,KAAKC,aAAqB,EAAE;;;oBAG1B,iBAAiB,GAAG,YAAY,CAAC,KAAK,CAAC;;oBAEvC,wBAAwB,GAAG,QAAQ,CAAC;oBACpC,MAAM;iBACP;gBACD,KAAKC,cAAsB,EAAE;;;oBAG3B,IAAM,KAAK,GAAG,eAAe,CAAC,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;oBAC7D,IAAI,KAAK,KAAK,CAAC,CAAC;wBAAE,iBAAiB,GAAG,KAAK,CAAC;oBAC5C,wBAAwB,GAAG,QAAQ,CAAC;oBACpC,MAAM;iBACP;gBACD,KAAKC,KAAa,EAAE;;oBAElB,eAAe,GAAG,UAAU,CAAC,eAAe,EAAE,gBAAgB,CAAC,CAAC;oBAChE,gBAAgB,GAAG,EAAE,CAAC;oBACtB,iBAAiB,GAAG,IAAI,CAAC,GAAG,CAC1B,iBAAiB,EACjB,eAAe,CAAC,MAAM,GAAG,CAAC,CAC3B,CAAC;oBACF,MAAM;iBACP;gBACD,KAAKC,cAAsB,EAAE;;oBAE3B,IAAI,OAAO,CAAC,MAAM,IAAI,eAAe,CAAC,MAAM,KAAK,OAAO,CAAC,MAAM,EAAE;wBAC/D,mBAAmB,CAAC,CAAC,CAAC,CAAC;qBACxB;oBAED,IAAI,iBAAiB,KAAK,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;wBACpD,iBAAiB,EAAE,CAAC;qBACrB;oBACD,IAAM,QAAQ,GAAG,YAAY,EAAE,CAAC;;;oBAGhC,WAAW,CAAC,QAAQ,CAAC,GAAG,YAAY,CAAC;oBAErC,eAAe,YAAO,eAAe,GAAE,QAAQ,EAAC,CAAC;;oBAEjD,wBAAwB,GAAG,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC;oBACtD,MAAM;iBACP;gBACD,KAAKC,YAAoB,EAAE;;oBAEzB,CAAC,iCAU+B,EAT9B,8BAAY,EACZ,4BAAW,EACX,8BAAY,EACZ,oCAAe,EACf,sCAAgB,EAChB,kCAAc,EACd,wCAAiB;;oBAEjB,kCAAc,EACkB;oBAClC,MAAM;iBACP;gBACD,KAAK,IAAI,EAAE;;oBAET,wBAAwB,GAAG,CAAC,CAAC;oBAE7B,IAAI,OAAO,CAAC,MAAM,IAAI,eAAe,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE;;wBAE7D,cAAc,GAAG,eAAe,CAC9B,cAAc,EACd,wBAAwB,EACxB,OAAO,EACP,cAAc,EACd,WAAW,EACX,eAAe,EACf,gBAAgB,EAChB,YAAY,CACb,CAAC;wBAEF,mBAAmB,CAAC,eAAe,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;;wBAG7D,wBAAwB,GAAG,QAAQ,CAAC;qBACrC;oBAED,MAAM;iBACP;gBACD,KAAK,MAAM,EAAE;oBACX,IAAM,cAAc,GAClB,cAAc,CAAC,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,KAAK,GAAA,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;oBAEzD,IAAI,cAAc,EAAE;;wBAElB,wBAAwB,GAAG,CAAC,CAAC;wBAE7B,IAAI,OAAO,CAAC,MAAM,IAAI,eAAe,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE;;4BAE7D,cAAc,GAAG,eAAe,CAC9B,cAAc,EACd,wBAAwB,EACxB,OAAO,EACP,cAAc,EACd,WAAW,EACX,eAAe,EACf,gBAAgB,EAChB,YAAY,CACb,CAAC;4BAEF,mBAAmB,CAAC,eAAe,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;;4BAG7D,wBAAwB,GAAG,QAAQ,CAAC;yBACrC;qBACF;yBAAM;wBACL,IAAI,iBAAiB,KAAK,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;4BACpD,iBAAiB,EAAE,CAAC;yBACrB;;wBAGD,IAAM,QAAQ,GAAG,YAAY,EAAE,CAAC;wBAChC,WAAW,CAAC,QAAQ,CAAC,GAAG,IAAI,aAAa,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;wBACrE,eAAe,YAAO,eAAe,GAAE,QAAQ,EAAC,CAAC;wBAEjD,wBAAwB,GAAG,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC;;wBAGtD,cAAc,GAAG,eAAe,CAC9B,cAAc,EACd,wBAAwB,EACxB,OAAO,EACP,cAAc,EACd,WAAW,EACX,eAAe,EACf,gBAAgB,EAChB,YAAY,CACb,CAAC;;wBAGF,cAAc,GAAG,cAAc,CAAC,GAAG,CAAC,UAAA,GAAG;4BAAI,uBACtC,GAAG,IACN,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,YAAY,CAAC;yBACvC,CAAC,CAAC;wBAEJ,iBAAiB,GAAG,wBAAwB,CAAC;wBAE7C,IAAI,OAAO,CAAC,MAAM,IAAI,eAAe,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE;4BAC7D,mBAAmB,CAAC,eAAe,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;yBAC9D;;wBAGD,wBAAwB,GAAG,QAAQ,CAAC;qBACrC;oBAED,MAAM;iBACP;gBACD,SAAS;;;oBAGP,wBAAwB,GAAG,QAAQ,CAAC;oBACpC,MAAM;iBACP;aACF;YAED,cAAc,GAAG,eAAe,CAC9B,cAAc,EACd,wBAAwB,EACxB,OAAO,EACP,cAAc,EACd,WAAW,EACX,eAAe,EACf,gBAAgB,EAChB,YAAY,CACb,CAAC;YACF,YAAY,GAAG,cAAc,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;YAE1D,OAAO;gBACL,YAAY,cAAA;gBACZ,WAAW,aAAA;gBACX,YAAY,cAAA;gBACZ,eAAe,iBAAA;gBACf,gBAAgB,kBAAA;gBAChB,cAAc,gBAAA;gBACd,iBAAiB,mBAAA;gBACjB,cAAc,gBAAA;aACf,CAAC;;SACH;KAAA,CAAC;CACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7cD;IA0BwC,sCAAc;;;;;gBADrD,UAAU;;6BAzBX;EA0BwC,cAAc;;IAUpD,uBACE,UAA8B,EAC9B,QAAwB,EACxB,SAA4B,EAC5B,SAA4B,EAC5B,cAAqC,EACrC,YAA0B,EACH,cACQ;QARjC,iBA4EC;QAlEC,IAAM,kBAAkB,GAAG,gBAAgB,CAAC,YAAY,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;QAC1E,IAAM,WAAW,GAAG,eAAe,CACjC,YAAY,EACZ,kBAAkB,EAClB,YAAY,EACZ,MAAM,CAAC,OAAO,EACd,MAAM,CACP,CAAC;QAEF,IAAM,aAAa,GAAG,KAAK,CACzB,KAAK,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAC,IAAI,CACnE,GAAG,CAAC,UAAU,CAAC,CAChB,EACD,UAAU,EACV,SAAS,CAAC,cAAc,CACzB,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC;QAElC,IAAM,cAAc,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;QAExD,IAAM,kBAAkB,GAAG,IAAI,aAAa,CAAc,CAAC,CAAC,CAAC;QAE7D,IAAM,uBAAuB,GAAG,aAAa;aAC1C,IAAI,CACH,cAAc,CAAC,cAAc,CAAC,EAC9B,IAAI,CAOF,UAAC,EAAsB,EAAE,EAAiB;gBAAvC,sBAAkB;gBAAI,oBAAiB,EAAhB,cAAM,EAAE,eAAO;YACvC,IAAM,kBAAkB,GAAG,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;;YAGxD,SAAS,CAAC,MAAM,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAAC;YAE7C,OAAO,EAAE,KAAK,EAAE,kBAAkB,EAAE,MAAM,QAAA,EAAE,CAAC;SAC9C,EACD,EAAE,KAAK,EAAE,kBAAkB,EAAE,MAAM,EAAE,IAAW,EAAE,CACnD,CACF;aACA,SAAS,CAAC,UAAC,EAAiB;gBAAf,gBAAK,EAAE,kBAAM;YACzB,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAE/B,IAAI,MAAM,CAAC,IAAI,KAAKD,cAAsB,EAAE;gBAC1C,IAAM,cAAc,GAAI,MAAgC,CAAC,MAAM,CAAC;gBAEhE,cAAc,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;aACrC;SACF,CAAC,CAAC;QAEL,IAAM,0BAA0B,GAAG,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC;YAC5D,KAAI,CAAC,OAAO,EAAE,CAAC;SAChB,CAAC,CAAC;QAEH,IAAM,YAAY,GAAG,kBAAkB,CAAC,YAAY,EAEnD,CAAC;QACF,IAAM,MAAM,GAAG,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;QAEnD,IAAI,CAAC,0BAA0B,GAAG,0BAA0B,CAAC;QAC7D,IAAI,CAAC,iBAAiB,GAAG,uBAAuB,CAAC;QACjD,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,WAAW,GAAG,YAAY,CAAC;QAChC,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;KACrB;IAED,gCAAQ,GAAR,UAAS,MAAc;QACrB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KAC9B;IAED,4BAAI,GAAJ,UAAK,MAAW;QACd,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KAC9B;IAED,6BAAK,GAAL,UAAM,KAAU,KAAI;IAEpB,gCAAQ,GAAR,eAAa;IAEb,qCAAa,GAAb,UAAc,MAAW;QACvB,IAAI,CAAC,QAAQ,CAAC,IAAIT,aAAqB,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;KAC/D;IAED,+BAAO,GAAP;QACE,IAAI,CAAC,QAAQ,CAAC,IAAIW,OAAe,EAAE,CAAC,CAAC;KACtC;IAED,6BAAK,GAAL;QACE,IAAI,CAAC,QAAQ,CAAC,IAAIC,KAAa,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;KAC/C;IAED,gCAAQ,GAAR;QACE,IAAI,CAAC,QAAQ,CAAC,IAAIC,QAAgB,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;KAClD;IAED,8BAAM,GAAN;QACE,IAAI,CAAC,QAAQ,CAAC,IAAIC,MAAc,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;KAChD;IAED,6BAAK,GAAL;QACE,IAAI,CAAC,QAAQ,CAAC,IAAIC,KAAa,EAAE,CAAC,CAAC;KACpC;IAED,oCAAY,GAAZ,UAAa,EAAU;QACrB,IAAI,CAAC,QAAQ,CAAC,IAAIC,YAAoB,CAAC,EAAE,CAAC,CAAC,CAAC;KAC7C;IAED,oCAAY,GAAZ,UAAa,QAAgB;QAC3B,IAAI,CAAC,QAAQ,CAAC,IAAIC,YAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC;KACnD;IAED,mCAAW,GAAX,UAAY,KAAa;QACvB,IAAI,CAAC,QAAQ,CAAC,IAAIC,WAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;KAC/C;IAED,mCAAW,GAAX,UAAY,eAAoB;QAC9B,IAAI,CAAC,QAAQ,CAAC,IAAIC,WAAmB,CAAC,eAAe,CAAC,CAAC,CAAC;KACzD;;gBAxIF,UAAU;;;;gBAFE,kBAAkB;gBAtB7B,cAAc;gBAEd,iBAAiB;gBAeV,iBAAiB;gBAdxB,qBAAqB;gBAPiB,YAAY;gDA2C/C,MAAM,SAAC,aAAa;gBAvBO,mBAAmB,uBAwB9C,MAAM,SAAC,qBAAqB;;wBA5CjC;;;ICiBa,+BAA+B,GAAG,IAAI,cAAc,CAC/D,0CAA0C,CAC3C,CAAC;AAEF,2CACE,SAAwC,EACxC,MAA2B;IAE3B,OAAO,OAAO,CAAC,SAAS,CAAC,IAAI,MAAM,CAAC,OAAO,KAAK,SAAS,CAAC;CAC3D;AAED;IACE,IAAM,YAAY,GAAG,8BAA8B,CAAC;IAEpD,IACE,OAAO,MAAM,KAAK,QAAQ;QAC1B,OAAQ,MAAc,CAAC,YAAY,CAAC,KAAK,WAC3C,EAAE;QACA,OAAQ,MAAc,CAAC,YAAY,CAAC,CAAC;KACtC;SAAM;QACL,OAAO,IAAI,CAAC;KACb;CACF;AAED,+BACE,QAAuB;IAEvB,OAAO,QAAQ,CAAC,KAAK,CAAC;CACvB;AAED;IACE,OAAO,IAAI,CAAC;CACb;AAED,AAAO,IAAM,YAAY,GAAG,qBAAqB,CAAC;AAElD,sBACE,QAA8B;IAE9B,IAAM,eAAe,GAAwB;QAC3C,MAAM,EAAE,KAAK;QACb,OAAO,EAAE,SAAS;QAClB,eAAe,EAAE,SAAS;QAC1B,cAAc,EAAE,SAAS;QACzB,IAAI,EAAE,YAAY;QAClB,SAAS,EAAE,KAAK;QAChB,OAAO,EAAE,KAAK;QACd,QAAQ,EAAE,KAAK;KAChB,CAAC;IAEF,IAAI,OAAO,GAAG,OAAO,QAAQ,KAAK,UAAU,GAAG,QAAQ,EAAE,GAAG,QAAQ,CAAC;IACrE,IAAM,OAAO,GAAG,OAAO,CAAC,OAAO;UAC3B,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;UACzC,KAAK,CAAC;IACV,IAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC;IAC7C,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,eAAe,EAAE,EAAE,QAAQ,UAAA,EAAE,EAAE,OAAO,CAAC,CAAC;IAEzE,IAAI,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;QACtC,MAAM,IAAI,KAAK,CACb,kDAAgD,MAAM,CAAC,MAAQ,CAChE,CAAC;KACH;IAED,OAAO,MAAM,CAAC;CACf;;;;IAIQ,8BAAU,GAAjB,UAAkB,OAAkC;QAAlC,wBAAA,EAAA,YAAkC;QAClD,OAAO;YACL,QAAQ,EAAE,mBAAmB;YAC7B,SAAS,EAAE;gBACT,iBAAiB;gBACjB,kBAAkB;gBAClB,aAAa;gBACb;oBACE,OAAO,EAAE,eAAe;oBACxB,QAAQ,EAAE,OAAO;iBAClB;gBACD;oBACE,OAAO,EAAE,+BAA+B;oBACxC,IAAI,EAAE,CAAC,wBAAwB,EAAE,qBAAqB,CAAC;oBACvD,UAAU,EAAE,iCAAiC;iBAC9C;gBACD;oBACE,OAAO,EAAE,wBAAwB;oBACjC,UAAU,EAAE,4BAA4B;iBACzC;gBACD;oBACE,OAAO,EAAE,qBAAqB;oBAC9B,IAAI,EAAE,CAAC,eAAe,CAAC;oBACvB,UAAU,EAAE,YAAY;iBACzB;gBACD;oBACE,OAAO,EAAE,eAAe;oBACxB,IAAI,EAAE,CAAC,aAAa,CAAC;oBACrB,UAAU,EAAE,qBAAqB;iBAClC;gBACD;oBACE,OAAO,EAAE,wBAAwB;oBACjC,WAAW,EAAE,kBAAkB;iBAChC;aACF;SACF,CAAC;KACH;;gBAtCF,QAAQ,SAAC,EAAE;;8BAnFZ;;;;;;;;;ACAA;;GAEG;;;;"}