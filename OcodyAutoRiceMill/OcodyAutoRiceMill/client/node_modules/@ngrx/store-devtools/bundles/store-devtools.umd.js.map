{"version":3,"file":"store-devtools.umd.js","sources":["../../../../../../../../../../execroot/ngrx/modules/store-devtools/src/config.ts","../../../../../../../../../../execroot/ngrx/modules/store-devtools/src/actions.ts","../../../../../../../../../../execroot/ngrx/modules/store-devtools/src/utils.ts","../../../../../../../../../../execroot/ngrx/modules/store-devtools/src/extension.ts","../../../../../../../../../../execroot/ngrx/modules/store-devtools/src/reducer.ts","../../../../../../../../../../execroot/ngrx/modules/store-devtools/src/devtools.ts","../../../../../../../../../../execroot/ngrx/modules/store-devtools/src/instrument.ts","../../../../../../../../../../execroot/ngrx/modules/store-devtools/store-devtools.ts"],"sourcesContent":["import { ActionReducer, Action } from '@ngrx/store';\nimport { InjectionToken, Type } from '@angular/core';\n\nexport type ActionSanitizer = (action: Action, id: number) => Action;\nexport type StateSanitizer = (state: any, index: number) => any;\nexport type SerializationOptions = {\n  options?: boolean | any;\n  replacer?: (key: any, value: any) => {};\n  reviver?: (key: any, value: any) => {};\n  immutable?: any;\n  refs?: Array<any>;\n};\n\nexport class StoreDevtoolsConfig {\n  maxAge: number | false;\n  monitor: ActionReducer<any, any>;\n  actionSanitizer?: ActionSanitizer;\n  stateSanitizer?: StateSanitizer;\n  name?: string;\n  serialize?: boolean | SerializationOptions;\n  logOnly?: boolean;\n  features?: any;\n}\n\nexport const STORE_DEVTOOLS_CONFIG = new InjectionToken<StoreDevtoolsConfig>(\n  '@ngrx/devtools Options'\n);\nexport const INITIAL_OPTIONS = new InjectionToken<StoreDevtoolsConfig>(\n  '@ngrx/devtools Initial Config'\n);\n\nexport type StoreDevtoolsOptions =\n  | Partial<StoreDevtoolsConfig>\n  | (() => Partial<StoreDevtoolsConfig>);\n","import { Action } from '@ngrx/store';\n\nexport const PERFORM_ACTION = 'PERFORM_ACTION';\nexport const REFRESH = 'REFRESH';\nexport const RESET = 'RESET';\nexport const ROLLBACK = 'ROLLBACK';\nexport const COMMIT = 'COMMIT';\nexport const SWEEP = 'SWEEP';\nexport const TOGGLE_ACTION = 'TOGGLE_ACTION';\nexport const SET_ACTIONS_ACTIVE = 'SET_ACTIONS_ACTIVE';\nexport const JUMP_TO_STATE = 'JUMP_TO_STATE';\nexport const JUMP_TO_ACTION = 'JUMP_TO_ACTION';\nexport const IMPORT_STATE = 'IMPORT_STATE';\n\nexport class PerformAction implements Action {\n  readonly type = PERFORM_ACTION;\n\n  constructor(public action: Action, public timestamp: number) {\n    if (typeof action.type === 'undefined') {\n      throw new Error(\n        'Actions may not have an undefined \"type\" property. ' +\n          'Have you misspelled a constant?'\n      );\n    }\n  }\n}\n\nexport class Refresh implements Action {\n  readonly type = REFRESH;\n}\n\nexport class Reset implements Action {\n  readonly type = RESET;\n\n  constructor(public timestamp: number) {}\n}\n\nexport class Rollback implements Action {\n  readonly type = ROLLBACK;\n\n  constructor(public timestamp: number) {}\n}\n\nexport class Commit implements Action {\n  readonly type = COMMIT;\n\n  constructor(public timestamp: number) {}\n}\n\nexport class Sweep implements Action {\n  readonly type = SWEEP;\n}\n\nexport class ToggleAction implements Action {\n  readonly type = TOGGLE_ACTION;\n\n  constructor(public id: number) {}\n}\n\nexport class SetActionsActive implements Action {\n  readonly type = SET_ACTIONS_ACTIVE;\n\n  constructor(\n    public start: number,\n    public end: number,\n    public active: boolean = true\n  ) {}\n}\n\nexport class JumpToState implements Action {\n  readonly type = JUMP_TO_STATE;\n\n  constructor(public index: number) {}\n}\n\nexport class JumpToAction implements Action {\n  readonly type = JUMP_TO_ACTION;\n\n  constructor(public actionId: number) {}\n}\n\nexport class ImportState implements Action {\n  readonly type = IMPORT_STATE;\n\n  constructor(public nextLiftedState: any) {}\n}\n\nexport type All =\n  | PerformAction\n  | Refresh\n  | Reset\n  | Rollback\n  | Commit\n  | Sweep\n  | ToggleAction\n  | SetActionsActive\n  | JumpToState\n  | JumpToAction\n  | ImportState;\n","import { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport * as Actions from './actions';\nimport { ActionSanitizer, StateSanitizer } from './config';\nimport {\n  ComputedState,\n  LiftedAction,\n  LiftedActions,\n  LiftedState,\n} from './reducer';\n\nexport function difference(first: any[], second: any[]) {\n  return first.filter(item => second.indexOf(item) < 0);\n}\n\n/**\n * Provides an app's view into the state of the lifted store.\n */\nexport function unliftState(liftedState: LiftedState) {\n  const { computedStates, currentStateIndex } = liftedState;\n  const { state } = computedStates[currentStateIndex];\n\n  return state;\n}\n\nexport function unliftAction(liftedState: LiftedState): LiftedAction {\n  return liftedState.actionsById[liftedState.nextActionId - 1];\n}\n\n/**\n * Lifts an app's action into an action on the lifted store.\n */\nexport function liftAction(action: Action) {\n  return new Actions.PerformAction(action, +Date.now());\n}\n\n/**\n * Sanitizes given actions with given function.\n */\nexport function sanitizeActions(\n  actionSanitizer: ActionSanitizer,\n  actions: LiftedActions\n): LiftedActions {\n  return Object.keys(actions).reduce(\n    (sanitizedActions, actionIdx) => {\n      const idx = Number(actionIdx);\n      sanitizedActions[idx] = sanitizeAction(\n        actionSanitizer,\n        actions[idx],\n        idx\n      );\n      return sanitizedActions;\n    },\n    <LiftedActions>{}\n  );\n}\n\n/**\n * Sanitizes given action with given function.\n */\nexport function sanitizeAction(\n  actionSanitizer: ActionSanitizer,\n  action: LiftedAction,\n  actionIdx: number\n): LiftedAction {\n  return {\n    ...action,\n    action: actionSanitizer(action.action, actionIdx),\n  };\n}\n\n/**\n * Sanitizes given states with given function.\n */\nexport function sanitizeStates(\n  stateSanitizer: StateSanitizer,\n  states: ComputedState[]\n): ComputedState[] {\n  return states.map((computedState, idx) => ({\n    state: sanitizeState(stateSanitizer, computedState.state, idx),\n    error: computedState.error,\n  }));\n}\n\n/**\n * Sanitizes given state with given function.\n */\nexport function sanitizeState(\n  stateSanitizer: StateSanitizer,\n  state: any,\n  stateIdx: number\n) {\n  return stateSanitizer(state, stateIdx);\n}\n","import { Inject, Injectable, InjectionToken } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { empty, Observable } from 'rxjs';\nimport { filter, map, share, switchMap, takeUntil } from 'rxjs/operators';\n\nimport { PERFORM_ACTION } from './actions';\nimport {\n  SerializationOptions,\n  STORE_DEVTOOLS_CONFIG,\n  StoreDevtoolsConfig,\n} from './config';\nimport { LiftedAction, LiftedState } from './reducer';\nimport {\n  sanitizeAction,\n  sanitizeActions,\n  sanitizeState,\n  sanitizeStates,\n  unliftState,\n} from './utils';\n\nexport const ExtensionActionTypes = {\n  START: 'START',\n  DISPATCH: 'DISPATCH',\n  STOP: 'STOP',\n  ACTION: 'ACTION',\n};\n\nexport const REDUX_DEVTOOLS_EXTENSION = new InjectionToken<\n  ReduxDevtoolsExtension\n>('Redux Devtools Extension');\n\nexport interface ReduxDevtoolsExtensionConnection {\n  subscribe(listener: (change: any) => void): void;\n  unsubscribe(): void;\n  send(action: any, state: any): void;\n  init(state?: any): void;\n  error(anyErr: any): void;\n}\nexport interface ReduxDevtoolsExtensionConfig {\n  features?: object | boolean;\n  name: string | undefined;\n  instanceId: string;\n  maxAge?: number;\n  serialize?: boolean | SerializationOptions;\n}\n\nexport interface ReduxDevtoolsExtension {\n  connect(\n    options: ReduxDevtoolsExtensionConfig\n  ): ReduxDevtoolsExtensionConnection;\n  send(\n    action: any,\n    state: any,\n    options: ReduxDevtoolsExtensionConfig,\n    instanceId?: string\n  ): void;\n}\n\n@Injectable()\nexport class DevtoolsExtension {\n  private instanceId = `ngrx-store-${Date.now()}`;\n  private devtoolsExtension: ReduxDevtoolsExtension;\n  private extensionConnection: ReduxDevtoolsExtensionConnection;\n\n  liftedActions$: Observable<any>;\n  actions$: Observable<any>;\n  start$: Observable<any>;\n\n  constructor(\n    @Inject(REDUX_DEVTOOLS_EXTENSION) devtoolsExtension: ReduxDevtoolsExtension,\n    @Inject(STORE_DEVTOOLS_CONFIG) private config: StoreDevtoolsConfig\n  ) {\n    this.devtoolsExtension = devtoolsExtension;\n    this.createActionStreams();\n  }\n\n  notify(action: LiftedAction, state: LiftedState) {\n    if (!this.devtoolsExtension) {\n      return;\n    }\n\n    // Check to see if the action requires a full update of the liftedState.\n    // If it is a simple action generated by the user's app, only send the\n    // action and the current state (fast).\n    //\n    // A full liftedState update (slow: serializes the entire liftedState) is\n    // only required when:\n    //   a) redux-devtools-extension fires the @@Init action (ignored by\n    //      @ngrx/store-devtools)\n    //   b) an action is generated by an @ngrx module (e.g. @ngrx/effects/init\n    //      or @ngrx/store/update-reducers)\n    //   c) the state has been recomputed due to time-traveling\n    //   d) any action that is not a PerformAction to err on the side of\n    //      caution.\n    if (action.type === PERFORM_ACTION) {\n      const currentState = unliftState(state);\n      const sanitizedState = this.config.stateSanitizer\n        ? sanitizeState(\n            this.config.stateSanitizer,\n            currentState,\n            state.currentStateIndex\n          )\n        : currentState;\n      const sanitizedAction = this.config.actionSanitizer\n        ? sanitizeAction(\n            this.config.actionSanitizer,\n            action,\n            state.nextActionId\n          )\n        : action;\n      this.extensionConnection.send(sanitizedAction, sanitizedState);\n    } else {\n      // Requires full state update\n      const sanitizedLiftedState = {\n        ...state,\n        actionsById: this.config.actionSanitizer\n          ? sanitizeActions(this.config.actionSanitizer, state.actionsById)\n          : state.actionsById,\n        computedStates: this.config.stateSanitizer\n          ? sanitizeStates(this.config.stateSanitizer, state.computedStates)\n          : state.computedStates,\n      };\n      this.devtoolsExtension.send(\n        null,\n        sanitizedLiftedState,\n        this.getExtensionConfig(this.instanceId, this.config),\n        this.instanceId\n      );\n    }\n  }\n\n  private createChangesObservable(): Observable<any> {\n    if (!this.devtoolsExtension) {\n      return empty();\n    }\n\n    return new Observable(subscriber => {\n      const connection = this.devtoolsExtension.connect(\n        this.getExtensionConfig(this.instanceId, this.config)\n      );\n      this.extensionConnection = connection;\n      connection.init();\n\n      connection.subscribe((change: any) => subscriber.next(change));\n      return connection.unsubscribe;\n    });\n  }\n\n  private createActionStreams() {\n    // Listens to all changes based on our instanceId\n    const changes$ = this.createChangesObservable().pipe(share());\n\n    // Listen for the start action\n    const start$ = changes$.pipe(\n      filter((change: any) => change.type === ExtensionActionTypes.START)\n    );\n\n    // Listen for the stop action\n    const stop$ = changes$.pipe(\n      filter((change: any) => change.type === ExtensionActionTypes.STOP)\n    );\n\n    // Listen for lifted actions\n    const liftedActions$ = changes$.pipe(\n      filter(change => change.type === ExtensionActionTypes.DISPATCH),\n      map(change => this.unwrapAction(change.payload))\n    );\n\n    // Listen for unlifted actions\n    const actions$ = changes$.pipe(\n      filter(change => change.type === ExtensionActionTypes.ACTION),\n      map(change => this.unwrapAction(change.payload))\n    );\n\n    const actionsUntilStop$ = actions$.pipe(takeUntil(stop$));\n    const liftedUntilStop$ = liftedActions$.pipe(takeUntil(stop$));\n    this.start$ = start$.pipe(takeUntil(stop$));\n\n    // Only take the action sources between the start/stop events\n    this.actions$ = this.start$.pipe(switchMap(() => actionsUntilStop$));\n    this.liftedActions$ = this.start$.pipe(switchMap(() => liftedUntilStop$));\n  }\n\n  private unwrapAction(action: Action) {\n    return typeof action === 'string' ? eval(`(${action})`) : action;\n  }\n\n  private getExtensionConfig(instanceId: string, config: StoreDevtoolsConfig) {\n    const extensionOptions: ReduxDevtoolsExtensionConfig = {\n      instanceId: instanceId,\n      name: config.name,\n      features: config.features,\n      serialize: config.serialize,\n      // The action/state sanitizers are not added to the config\n      // because sanitation is done in this class already.\n      // It is done before sending it to the devtools extension for consistency:\n      // - If we call extensionConnection.send(...),\n      //   the extension would call the sanitizers.\n      // - If we call devtoolsExtension.send(...) (aka full state update),\n      //   the extension would NOT call the sanitizers, so we have to do it ourselves.\n    };\n    if (config.maxAge !== false /* support === 0 */) {\n      extensionOptions.maxAge = config.maxAge;\n    }\n    return extensionOptions;\n  }\n}\n","import { ErrorHandler } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionsSubject,\n  ReducerManager,\n  UPDATE,\n  INIT,\n} from '@ngrx/store';\nimport { difference, liftAction } from './utils';\nimport * as Actions from './actions';\nimport { StoreDevtoolsConfig, StateSanitizer } from './config';\nimport { PerformAction } from './actions';\n\nexport type InitAction = {\n  readonly type: typeof INIT;\n};\n\nexport type UpdateReducerAction = {\n  readonly type: typeof UPDATE;\n};\n\nexport type CoreActions = InitAction | UpdateReducerAction;\nexport type Actions = Actions.All | CoreActions;\n\nexport const INIT_ACTION = { type: INIT };\n\nexport interface ComputedState {\n  state: any;\n  error: any;\n}\n\nexport interface LiftedAction {\n  type: string;\n  action: Action;\n}\n\nexport interface LiftedActions {\n  [id: number]: LiftedAction;\n}\n\nexport interface LiftedState {\n  monitorState: any;\n  nextActionId: number;\n  actionsById: LiftedActions;\n  stagedActionIds: number[];\n  skippedActionIds: number[];\n  committedState: any;\n  currentStateIndex: number;\n  computedStates: ComputedState[];\n}\n\n/**\n * Computes the next entry in the log by applying an action.\n */\nfunction computeNextEntry(\n  reducer: ActionReducer<any, any>,\n  action: Action,\n  state: any,\n  error: any,\n  errorHandler: ErrorHandler\n) {\n  if (error) {\n    return {\n      state,\n      error: 'Interrupted by an error up the chain',\n    };\n  }\n\n  let nextState = state;\n  let nextError;\n  try {\n    nextState = reducer(state, action);\n  } catch (err) {\n    nextError = err.toString();\n    errorHandler.handleError(err.stack || err);\n  }\n\n  return {\n    state: nextState,\n    error: nextError,\n  };\n}\n\n/**\n * Runs the reducer on invalidated actions to get a fresh computation log.\n */\nfunction recomputeStates(\n  computedStates: ComputedState[],\n  minInvalidatedStateIndex: number,\n  reducer: ActionReducer<any, any>,\n  committedState: any,\n  actionsById: LiftedActions,\n  stagedActionIds: number[],\n  skippedActionIds: number[],\n  errorHandler: ErrorHandler\n) {\n  // Optimization: exit early and return the same reference\n  // if we know nothing could have changed.\n  if (\n    minInvalidatedStateIndex >= computedStates.length &&\n    computedStates.length === stagedActionIds.length\n  ) {\n    return computedStates;\n  }\n\n  const nextComputedStates = computedStates.slice(0, minInvalidatedStateIndex);\n  for (let i = minInvalidatedStateIndex; i < stagedActionIds.length; i++) {\n    const actionId = stagedActionIds[i];\n    const action = actionsById[actionId].action;\n\n    const previousEntry = nextComputedStates[i - 1];\n    const previousState = previousEntry ? previousEntry.state : committedState;\n    const previousError = previousEntry ? previousEntry.error : undefined;\n\n    const shouldSkip = skippedActionIds.indexOf(actionId) > -1;\n    const entry: ComputedState = shouldSkip\n      ? previousEntry\n      : computeNextEntry(\n          reducer,\n          action,\n          previousState,\n          previousError,\n          errorHandler\n        );\n\n    nextComputedStates.push(entry);\n  }\n\n  return nextComputedStates;\n}\n\nexport function liftInitialState(\n  initialCommittedState?: any,\n  monitorReducer?: any\n): LiftedState {\n  return {\n    monitorState: monitorReducer(undefined, {}),\n    nextActionId: 1,\n    actionsById: { 0: liftAction(INIT_ACTION) },\n    stagedActionIds: [0],\n    skippedActionIds: [],\n    committedState: initialCommittedState,\n    currentStateIndex: 0,\n    computedStates: [],\n  };\n}\n\n/**\n * Creates a history state reducer from an app's reducer.\n */\nexport function liftReducerWith(\n  initialCommittedState: any,\n  initialLiftedState: LiftedState,\n  errorHandler: ErrorHandler,\n  monitorReducer?: any,\n  options: Partial<StoreDevtoolsConfig> = {}\n) {\n  /**\n   * Manages how the history actions modify the history state.\n   */\n  return (\n    reducer: ActionReducer<any, any>\n  ): ActionReducer<LiftedState, Actions> => (liftedState, liftedAction) => {\n    let {\n      monitorState,\n      actionsById,\n      nextActionId,\n      stagedActionIds,\n      skippedActionIds,\n      committedState,\n      currentStateIndex,\n      computedStates,\n    } =\n      liftedState || initialLiftedState;\n\n    if (!liftedState) {\n      // Prevent mutating initialLiftedState\n      actionsById = Object.create(actionsById);\n    }\n\n    function commitExcessActions(n: number) {\n      // Auto-commits n-number of excess actions.\n      let excess = n;\n      let idsToDelete = stagedActionIds.slice(1, excess + 1);\n\n      for (let i = 0; i < idsToDelete.length; i++) {\n        if (computedStates[i + 1].error) {\n          // Stop if error is found. Commit actions up to error.\n          excess = i;\n          idsToDelete = stagedActionIds.slice(1, excess + 1);\n          break;\n        } else {\n          delete actionsById[idsToDelete[i]];\n        }\n      }\n\n      skippedActionIds = skippedActionIds.filter(\n        id => idsToDelete.indexOf(id) === -1\n      );\n      stagedActionIds = [0, ...stagedActionIds.slice(excess + 1)];\n      committedState = computedStates[excess].state;\n      computedStates = computedStates.slice(excess);\n      currentStateIndex =\n        currentStateIndex > excess ? currentStateIndex - excess : 0;\n    }\n\n    // By default, aggressively recompute every state whatever happens.\n    // This has O(n) performance, so we'll override this to a sensible\n    // value whenever we feel like we don't have to recompute the states.\n    let minInvalidatedStateIndex = 0;\n\n    switch (liftedAction.type) {\n      case Actions.RESET: {\n        // Get back to the state the store was created with.\n        actionsById = { 0: liftAction(INIT_ACTION) };\n        nextActionId = 1;\n        stagedActionIds = [0];\n        skippedActionIds = [];\n        committedState = initialCommittedState;\n        currentStateIndex = 0;\n        computedStates = [];\n        break;\n      }\n      case Actions.COMMIT: {\n        // Consider the last committed state the new starting point.\n        // Squash any staged actions into a single committed state.\n        actionsById = { 0: liftAction(INIT_ACTION) };\n        nextActionId = 1;\n        stagedActionIds = [0];\n        skippedActionIds = [];\n        committedState = computedStates[currentStateIndex].state;\n        currentStateIndex = 0;\n        computedStates = [];\n        break;\n      }\n      case Actions.ROLLBACK: {\n        // Forget about any staged actions.\n        // Start again from the last committed state.\n        actionsById = { 0: liftAction(INIT_ACTION) };\n        nextActionId = 1;\n        stagedActionIds = [0];\n        skippedActionIds = [];\n        currentStateIndex = 0;\n        computedStates = [];\n        break;\n      }\n      case Actions.TOGGLE_ACTION: {\n        // Toggle whether an action with given ID is skipped.\n        // Being skipped means it is a no-op during the computation.\n        const { id: actionId } = liftedAction;\n        const index = skippedActionIds.indexOf(actionId);\n        if (index === -1) {\n          skippedActionIds = [actionId, ...skippedActionIds];\n        } else {\n          skippedActionIds = skippedActionIds.filter(id => id !== actionId);\n        }\n        // Optimization: we know history before this action hasn't changed\n        minInvalidatedStateIndex = stagedActionIds.indexOf(actionId);\n        break;\n      }\n      case Actions.SET_ACTIONS_ACTIVE: {\n        // Toggle whether an action with given ID is skipped.\n        // Being skipped means it is a no-op during the computation.\n        const { start, end, active } = liftedAction;\n        const actionIds = [];\n        for (let i = start; i < end; i++) actionIds.push(i);\n        if (active) {\n          skippedActionIds = difference(skippedActionIds, actionIds);\n        } else {\n          skippedActionIds = [...skippedActionIds, ...actionIds];\n        }\n\n        // Optimization: we know history before this action hasn't changed\n        minInvalidatedStateIndex = stagedActionIds.indexOf(start);\n        break;\n      }\n      case Actions.JUMP_TO_STATE: {\n        // Without recomputing anything, move the pointer that tell us\n        // which state is considered the current one. Useful for sliders.\n        currentStateIndex = liftedAction.index;\n        // Optimization: we know the history has not changed.\n        minInvalidatedStateIndex = Infinity;\n        break;\n      }\n      case Actions.JUMP_TO_ACTION: {\n        // Jumps to a corresponding state to a specific action.\n        // Useful when filtering actions.\n        const index = stagedActionIds.indexOf(liftedAction.actionId);\n        if (index !== -1) currentStateIndex = index;\n        minInvalidatedStateIndex = Infinity;\n        break;\n      }\n      case Actions.SWEEP: {\n        // Forget any actions that are currently being skipped.\n        stagedActionIds = difference(stagedActionIds, skippedActionIds);\n        skippedActionIds = [];\n        currentStateIndex = Math.min(\n          currentStateIndex,\n          stagedActionIds.length - 1\n        );\n        break;\n      }\n      case Actions.PERFORM_ACTION: {\n        // Auto-commit as new actions come in.\n        if (options.maxAge && stagedActionIds.length === options.maxAge) {\n          commitExcessActions(1);\n        }\n\n        if (currentStateIndex === stagedActionIds.length - 1) {\n          currentStateIndex++;\n        }\n        const actionId = nextActionId++;\n        // Mutation! This is the hottest path, and we optimize on purpose.\n        // It is safe because we set a new key in a cache dictionary.\n        actionsById[actionId] = liftedAction;\n\n        stagedActionIds = [...stagedActionIds, actionId];\n        // Optimization: we know that only the new action needs computing.\n        minInvalidatedStateIndex = stagedActionIds.length - 1;\n        break;\n      }\n      case Actions.IMPORT_STATE: {\n        // Completely replace everything.\n        ({\n          monitorState,\n          actionsById,\n          nextActionId,\n          stagedActionIds,\n          skippedActionIds,\n          committedState,\n          currentStateIndex,\n          // prettier-ignore\n          computedStates\n        } = liftedAction.nextLiftedState);\n        break;\n      }\n      case INIT: {\n        // Always recompute states on hot reload and init.\n        minInvalidatedStateIndex = 0;\n\n        if (options.maxAge && stagedActionIds.length > options.maxAge) {\n          // States must be recomputed before committing excess.\n          computedStates = recomputeStates(\n            computedStates,\n            minInvalidatedStateIndex,\n            reducer,\n            committedState,\n            actionsById,\n            stagedActionIds,\n            skippedActionIds,\n            errorHandler\n          );\n\n          commitExcessActions(stagedActionIds.length - options.maxAge);\n\n          // Avoid double computation.\n          minInvalidatedStateIndex = Infinity;\n        }\n\n        break;\n      }\n      case UPDATE: {\n        const stateHasErrors =\n          computedStates.filter(state => state.error).length > 0;\n\n        if (stateHasErrors) {\n          // Recompute all states\n          minInvalidatedStateIndex = 0;\n\n          if (options.maxAge && stagedActionIds.length > options.maxAge) {\n            // States must be recomputed before committing excess.\n            computedStates = recomputeStates(\n              computedStates,\n              minInvalidatedStateIndex,\n              reducer,\n              committedState,\n              actionsById,\n              stagedActionIds,\n              skippedActionIds,\n              errorHandler\n            );\n\n            commitExcessActions(stagedActionIds.length - options.maxAge);\n\n            // Avoid double computation.\n            minInvalidatedStateIndex = Infinity;\n          }\n        } else {\n          if (currentStateIndex === stagedActionIds.length - 1) {\n            currentStateIndex++;\n          }\n\n          // Add a new action to only recompute state\n          const actionId = nextActionId++;\n          actionsById[actionId] = new PerformAction(liftedAction, +Date.now());\n          stagedActionIds = [...stagedActionIds, actionId];\n\n          minInvalidatedStateIndex = stagedActionIds.length - 1;\n\n          // States must be recomputed before committing excess.\n          computedStates = recomputeStates(\n            computedStates,\n            minInvalidatedStateIndex,\n            reducer,\n            committedState,\n            actionsById,\n            stagedActionIds,\n            skippedActionIds,\n            errorHandler\n          );\n\n          // Recompute state history with latest reducer and update action\n          computedStates = computedStates.map(cmp => ({\n            ...cmp,\n            state: reducer(cmp.state, liftedAction),\n          }));\n\n          currentStateIndex = minInvalidatedStateIndex;\n\n          if (options.maxAge && stagedActionIds.length > options.maxAge) {\n            commitExcessActions(stagedActionIds.length - options.maxAge);\n          }\n\n          // Avoid double computation.\n          minInvalidatedStateIndex = Infinity;\n        }\n\n        break;\n      }\n      default: {\n        // If the action is not recognized, it's a monitor action.\n        // Optimization: a monitor action can't change history.\n        minInvalidatedStateIndex = Infinity;\n        break;\n      }\n    }\n\n    computedStates = recomputeStates(\n      computedStates,\n      minInvalidatedStateIndex,\n      reducer,\n      committedState,\n      actionsById,\n      stagedActionIds,\n      skippedActionIds,\n      errorHandler\n    );\n    monitorState = monitorReducer(monitorState, liftedAction);\n\n    return {\n      monitorState,\n      actionsById,\n      nextActionId,\n      stagedActionIds,\n      skippedActionIds,\n      committedState,\n      currentStateIndex,\n      computedStates,\n    };\n  };\n}\n","import { Injectable, Inject, OnDestroy, ErrorHandler } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionsSubject,\n  INITIAL_STATE,\n  ReducerObservable,\n  ScannedActionsSubject,\n} from '@ngrx/store';\nimport {\n  merge,\n  Observable,\n  Observer,\n  queueScheduler,\n  ReplaySubject,\n  Subscription,\n} from 'rxjs';\nimport { map, observeOn, scan, skip, withLatestFrom } from 'rxjs/operators';\n\nimport * as Actions from './actions';\nimport { STORE_DEVTOOLS_CONFIG, StoreDevtoolsConfig } from './config';\nimport { DevtoolsExtension } from './extension';\nimport { LiftedState, liftInitialState, liftReducerWith } from './reducer';\nimport { liftAction, unliftState } from './utils';\n\n@Injectable()\nexport class DevtoolsDispatcher extends ActionsSubject {}\n\n@Injectable()\nexport class StoreDevtools implements Observer<any> {\n  private stateSubscription: Subscription;\n  private extensionStartSubscription: Subscription;\n  public dispatcher: ActionsSubject;\n  public liftedState: Observable<LiftedState>;\n  public state: Observable<any>;\n\n  constructor(\n    dispatcher: DevtoolsDispatcher,\n    actions$: ActionsSubject,\n    reducers$: ReducerObservable,\n    extension: DevtoolsExtension,\n    scannedActions: ScannedActionsSubject,\n    errorHandler: ErrorHandler,\n    @Inject(INITIAL_STATE) initialState: any,\n    @Inject(STORE_DEVTOOLS_CONFIG) config: StoreDevtoolsConfig\n  ) {\n    const liftedInitialState = liftInitialState(initialState, config.monitor);\n    const liftReducer = liftReducerWith(\n      initialState,\n      liftedInitialState,\n      errorHandler,\n      config.monitor,\n      config\n    );\n\n    const liftedAction$ = merge(\n      merge(actions$.asObservable().pipe(skip(1)), extension.actions$).pipe(\n        map(liftAction)\n      ),\n      dispatcher,\n      extension.liftedActions$\n    ).pipe(observeOn(queueScheduler));\n\n    const liftedReducer$ = reducers$.pipe(map(liftReducer));\n\n    const liftedStateSubject = new ReplaySubject<LiftedState>(1);\n\n    const liftedStateSubscription = liftedAction$\n      .pipe(\n        withLatestFrom(liftedReducer$),\n        scan<\n          [any, ActionReducer<LiftedState, Actions.All>],\n          {\n            state: LiftedState;\n            action: any;\n          }\n        >(\n          ({ state: liftedState }, [action, reducer]) => {\n            const reducedLiftedState = reducer(liftedState, action);\n\n            // // Extension should be sent the sanitized lifted state\n            extension.notify(action, reducedLiftedState);\n\n            return { state: reducedLiftedState, action };\n          },\n          { state: liftedInitialState, action: null as any }\n        )\n      )\n      .subscribe(({ state, action }) => {\n        liftedStateSubject.next(state);\n\n        if (action.type === Actions.PERFORM_ACTION) {\n          const unliftedAction = (action as Actions.PerformAction).action;\n\n          scannedActions.next(unliftedAction);\n        }\n      });\n\n    const extensionStartSubscription = extension.start$.subscribe(() => {\n      this.refresh();\n    });\n\n    const liftedState$ = liftedStateSubject.asObservable() as Observable<\n      LiftedState\n    >;\n    const state$ = liftedState$.pipe(map(unliftState));\n\n    this.extensionStartSubscription = extensionStartSubscription;\n    this.stateSubscription = liftedStateSubscription;\n    this.dispatcher = dispatcher;\n    this.liftedState = liftedState$;\n    this.state = state$;\n  }\n\n  dispatch(action: Action) {\n    this.dispatcher.next(action);\n  }\n\n  next(action: any) {\n    this.dispatcher.next(action);\n  }\n\n  error(error: any) {}\n\n  complete() {}\n\n  performAction(action: any) {\n    this.dispatch(new Actions.PerformAction(action, +Date.now()));\n  }\n\n  refresh() {\n    this.dispatch(new Actions.Refresh());\n  }\n\n  reset() {\n    this.dispatch(new Actions.Reset(+Date.now()));\n  }\n\n  rollback() {\n    this.dispatch(new Actions.Rollback(+Date.now()));\n  }\n\n  commit() {\n    this.dispatch(new Actions.Commit(+Date.now()));\n  }\n\n  sweep() {\n    this.dispatch(new Actions.Sweep());\n  }\n\n  toggleAction(id: number) {\n    this.dispatch(new Actions.ToggleAction(id));\n  }\n\n  jumpToAction(actionId: number) {\n    this.dispatch(new Actions.JumpToAction(actionId));\n  }\n\n  jumpToState(index: number) {\n    this.dispatch(new Actions.JumpToState(index));\n  }\n\n  importState(nextLiftedState: any) {\n    this.dispatch(new Actions.ImportState(nextLiftedState));\n  }\n}\n","import { InjectionToken, ModuleWithProviders, NgModule } from '@angular/core';\nimport { ReducerManagerDispatcher, StateObservable } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport {\n  INITIAL_OPTIONS,\n  STORE_DEVTOOLS_CONFIG,\n  StoreDevtoolsConfig,\n  StoreDevtoolsOptions,\n} from './config';\nimport { DevtoolsDispatcher, StoreDevtools } from './devtools';\nimport {\n  DevtoolsExtension,\n  REDUX_DEVTOOLS_EXTENSION,\n  ReduxDevtoolsExtension,\n} from './extension';\n\nexport const IS_EXTENSION_OR_MONITOR_PRESENT = new InjectionToken<boolean>(\n  'Is Devtools Extension or Monitor Present'\n);\n\nexport function createIsExtensionOrMonitorPresent(\n  extension: ReduxDevtoolsExtension | null,\n  config: StoreDevtoolsConfig\n) {\n  return Boolean(extension) || config.monitor !== noMonitor;\n}\n\nexport function createReduxDevtoolsExtension() {\n  const extensionKey = '__REDUX_DEVTOOLS_EXTENSION__';\n\n  if (\n    typeof window === 'object' &&\n    typeof (window as any)[extensionKey] !== 'undefined'\n  ) {\n    return (window as any)[extensionKey];\n  } else {\n    return null;\n  }\n}\n\nexport function createStateObservable(\n  devtools: StoreDevtools\n): Observable<any> {\n  return devtools.state;\n}\n\nexport function noMonitor(): null {\n  return null;\n}\n\nexport const DEFAULT_NAME = 'NgRx Store DevTools';\n\nexport function createConfig(\n  _options: StoreDevtoolsOptions\n): StoreDevtoolsConfig {\n  const DEFAULT_OPTIONS: StoreDevtoolsConfig = {\n    maxAge: false,\n    monitor: noMonitor,\n    actionSanitizer: undefined,\n    stateSanitizer: undefined,\n    name: DEFAULT_NAME,\n    serialize: false,\n    logOnly: false,\n    features: false,\n  };\n\n  let options = typeof _options === 'function' ? _options() : _options;\n  const logOnly = options.logOnly\n    ? { pause: true, export: true, test: true }\n    : false;\n  const features = options.features || logOnly;\n  const config = Object.assign({}, DEFAULT_OPTIONS, { features }, options);\n\n  if (config.maxAge && config.maxAge < 2) {\n    throw new Error(\n      `Devtools 'maxAge' cannot be less than 2, got ${config.maxAge}`\n    );\n  }\n\n  return config;\n}\n\n@NgModule({})\nexport class StoreDevtoolsModule {\n  static instrument(options: StoreDevtoolsOptions = {}): ModuleWithProviders {\n    return {\n      ngModule: StoreDevtoolsModule,\n      providers: [\n        DevtoolsExtension,\n        DevtoolsDispatcher,\n        StoreDevtools,\n        {\n          provide: INITIAL_OPTIONS,\n          useValue: options,\n        },\n        {\n          provide: IS_EXTENSION_OR_MONITOR_PRESENT,\n          deps: [REDUX_DEVTOOLS_EXTENSION, STORE_DEVTOOLS_CONFIG],\n          useFactory: createIsExtensionOrMonitorPresent,\n        },\n        {\n          provide: REDUX_DEVTOOLS_EXTENSION,\n          useFactory: createReduxDevtoolsExtension,\n        },\n        {\n          provide: STORE_DEVTOOLS_CONFIG,\n          deps: [INITIAL_OPTIONS],\n          useFactory: createConfig,\n        },\n        {\n          provide: StateObservable,\n          deps: [StoreDevtools],\n          useFactory: createStateObservable,\n        },\n        {\n          provide: ReducerManagerDispatcher,\n          useExisting: DevtoolsDispatcher,\n        },\n      ],\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {INITIAL_OPTIONS as Éµngrx_modules_store_devtools_store_devtools_i,STORE_DEVTOOLS_CONFIG as Éµngrx_modules_store_devtools_store_devtools_h} from './src/config';\nexport {DevtoolsDispatcher as Éµngrx_modules_store_devtools_store_devtools_g} from './src/devtools';\nexport {DevtoolsExtension as Éµngrx_modules_store_devtools_store_devtools_k,REDUX_DEVTOOLS_EXTENSION as Éµngrx_modules_store_devtools_store_devtools_j} from './src/extension';\nexport {IS_EXTENSION_OR_MONITOR_PRESENT as Éµngrx_modules_store_devtools_store_devtools_a,createConfig as Éµngrx_modules_store_devtools_store_devtools_f,createIsExtensionOrMonitorPresent as Éµngrx_modules_store_devtools_store_devtools_b,createReduxDevtoolsExtension as Éµngrx_modules_store_devtools_store_devtools_c,createStateObservable as Éµngrx_modules_store_devtools_store_devtools_d,noMonitor as Éµngrx_modules_store_devtools_store_devtools_e} from './src/instrument';"],"names":["InjectionToken","Actions.PerformAction","empty","Observable","share","filter","map","takeUntil","switchMap","Injectable","Inject","INIT","Actions.RESET","Actions.COMMIT","Actions.ROLLBACK","Actions.TOGGLE_ACTION","Actions.SET_ACTIONS_ACTIVE","Actions.JUMP_TO_STATE","Actions.JUMP_TO_ACTION","Actions.SWEEP","Actions.PERFORM_ACTION","Actions.IMPORT_STATE","UPDATE","ActionsSubject","merge","skip","observeOn","queueScheduler","ReplaySubject","withLatestFrom","scan","Actions.Refresh","Actions.Reset","Actions.Rollback","Actions.Commit","Actions.Sweep","Actions.ToggleAction","Actions.JumpToAction","Actions.JumpToState","Actions.ImportState","ReducerObservable","ScannedActionsSubject","ErrorHandler","INITIAL_STATE","StateObservable","ReducerManagerDispatcher","NgModule"],"mappings":"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"}