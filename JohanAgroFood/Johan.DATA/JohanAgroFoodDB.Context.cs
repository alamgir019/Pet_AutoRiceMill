//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Johan.DATA
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class JohanAgroFoodDBEntities : DbContext
    {
        public JohanAgroFoodDBEntities()
            : base("name=JohanAgroFoodDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<STK_Balance> STK_Balance { get; set; }
        public virtual DbSet<STK_tblStock> STK_tblStock { get; set; }
        public virtual DbSet<tblBuy> tblBuys { get; set; }
        public virtual DbSet<tblCollection> tblCollections { get; set; }
        public virtual DbSet<tblCommonElement> tblCommonElements { get; set; }
        public virtual DbSet<tblCostingSource> tblCostingSources { get; set; }
        public virtual DbSet<tblIncomeSource> tblIncomeSources { get; set; }
        public virtual DbSet<tblLoanar> tblLoanars { get; set; }
        public virtual DbSet<tblParty> tblParties { get; set; }
        public virtual DbSet<tblPayable> tblPayables { get; set; }
        public virtual DbSet<tblPayment> tblPayments { get; set; }
        public virtual DbSet<tblProduct> tblProducts { get; set; }
        public virtual DbSet<tblProductPrice> tblProductPrices { get; set; }
        public virtual DbSet<tblSell> tblSells { get; set; }
        public virtual DbSet<tblUser> tblUsers { get; set; }
        public virtual DbSet<tblInterest> tblInterests { get; set; }
        public virtual DbSet<STK_Transaction> STK_Transaction { get; set; }
        public virtual DbSet<STK_tblPaddy> STK_tblPaddy { get; set; }
        public virtual DbSet<BagTransaction> BagTransactions { get; set; }
        public virtual DbSet<tblDue> tblDues { get; set; }
        public virtual DbSet<OpeningBalance> OpeningBalances { get; set; }
        public virtual DbSet<SalaryPayment> SalaryPayments { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<PaddyTransaction> PaddyTransactions { get; set; }
    
        public virtual ObjectResult<sp_getProductSellInfo_Result> sp_getProductSellInfo(Nullable<int> productId, Nullable<int> paerntId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var paerntIdParameter = paerntId.HasValue ?
                new ObjectParameter("paerntId", paerntId) :
                new ObjectParameter("paerntId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProductSellInfo_Result>("sp_getProductSellInfo", productIdParameter, paerntIdParameter);
        }
    
        public virtual ObjectResult<sp_GetHuskInfo_Result> sp_GetHuskInfo(Nullable<int> partyId, Nullable<int> parentProd, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var partyIdParameter = partyId.HasValue ?
                new ObjectParameter("partyId", partyId) :
                new ObjectParameter("partyId", typeof(int));
    
            var parentProdParameter = parentProd.HasValue ?
                new ObjectParameter("parentProd", parentProd) :
                new ObjectParameter("parentProd", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetHuskInfo_Result>("sp_GetHuskInfo", partyIdParameter, parentProdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_GetStockInfo_Result> sp_GetStockInfo(Nullable<int> stockId, Nullable<int> productId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var stockIdParameter = stockId.HasValue ?
                new ObjectParameter("stockId", stockId) :
                new ObjectParameter("stockId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetStockInfo_Result>("sp_GetStockInfo", stockIdParameter, productIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_GetDailySellInfo_Result> sp_GetDailySellInfo(Nullable<int> parentProd, Nullable<System.DateTime> todayDate)
        {
            var parentProdParameter = parentProd.HasValue ?
                new ObjectParameter("parentProd", parentProd) :
                new ObjectParameter("parentProd", typeof(int));
    
            var todayDateParameter = todayDate.HasValue ?
                new ObjectParameter("todayDate", todayDate) :
                new ObjectParameter("todayDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDailySellInfo_Result>("sp_GetDailySellInfo", parentProdParameter, todayDateParameter);
        }
    
        public virtual ObjectResult<sp_GetProductInfo_Result> sp_GetProductInfo(Nullable<int> partyId, Nullable<int> parentProd, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var partyIdParameter = partyId.HasValue ?
                new ObjectParameter("partyId", partyId) :
                new ObjectParameter("partyId", typeof(int));
    
            var parentProdParameter = parentProd.HasValue ?
                new ObjectParameter("parentProd", parentProd) :
                new ObjectParameter("parentProd", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetProductInfo_Result>("sp_GetProductInfo", partyIdParameter, parentProdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_GetHuskIncWithd_Result> sp_GetHuskIncWithd(Nullable<int> parentProd, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var parentProdParameter = parentProd.HasValue ?
                new ObjectParameter("parentProd", parentProd) :
                new ObjectParameter("parentProd", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetHuskIncWithd_Result>("sp_GetHuskIncWithd", parentProdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_RptPaddyStockInfo_Result> sp_RptPaddyStockInfo(Nullable<int> stockId, Nullable<int> productId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var stockIdParameter = stockId.HasValue ?
                new ObjectParameter("stockId", stockId) :
                new ObjectParameter("stockId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RptPaddyStockInfo_Result>("sp_RptPaddyStockInfo", stockIdParameter, productIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_rptParticleGeneral_Result> sp_rptParticleGeneral(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_rptParticleGeneral_Result>("sp_rptParticleGeneral", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_GetPaddyInfo_Result> sp_GetPaddyInfo(Nullable<int> partyId, Nullable<int> parentProd, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var partyIdParameter = partyId.HasValue ?
                new ObjectParameter("partyId", partyId) :
                new ObjectParameter("partyId", typeof(int));
    
            var parentProdParameter = parentProd.HasValue ?
                new ObjectParameter("parentProd", parentProd) :
                new ObjectParameter("parentProd", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPaddyInfo_Result>("sp_GetPaddyInfo", partyIdParameter, parentProdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> func_paddyparta(Nullable<int> stockId, Nullable<int> productId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var stockIdParameter = stockId.HasValue ?
                new ObjectParameter("stockId", stockId) :
                new ObjectParameter("stockId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("func_paddyparta", stockIdParameter, productIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_GetPaddyBuyInfo_Result> sp_GetPaddyBuyInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPaddyBuyInfo_Result>("sp_GetPaddyBuyInfo");
        }
    
        public virtual ObjectResult<sp_getDailyPaddyBuy_Result> sp_getDailyPaddyBuy(Nullable<System.DateTime> todayDate)
        {
            var todayDateParameter = todayDate.HasValue ?
                new ObjectParameter("todayDate", todayDate) :
                new ObjectParameter("todayDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getDailyPaddyBuy_Result>("sp_getDailyPaddyBuy", todayDateParameter);
        }
    }
}
